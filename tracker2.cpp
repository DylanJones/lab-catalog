#include <opencv2/core.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/calib3d.hpp>
#include <opencv2/ccalib.hpp>
#include <opencv2/features2d.hpp>
#include <opencv2/aruco.hpp>
#include <iostream>
#include <set>
#include <unordered_map>
#include <cstdlib>

using cv::Mat;
using std::vector;
using std::cout;
using std::endl;

vector<unsigned char> tjlogo_png = {
        0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
        0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x00, 0x00, 0xf4,
        0x08, 0x06, 0x00, 0x00, 0x00, 0x21, 0x67, 0x1b, 0x83, 0x00, 0x00, 0x00,
        0x06, 0x62, 0x4b, 0x47, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf9,
        0x43, 0xbb, 0x7f, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00,
        0x00, 0x0d, 0xd7, 0x00, 0x00, 0x0d, 0xd7, 0x01, 0x42, 0x28, 0x9b, 0x78,
        0x00, 0x00, 0x00, 0x07, 0x74, 0x49, 0x4d, 0x45, 0x07, 0xe2, 0x03, 0x1a,
        0x15, 0x35, 0x06, 0xbe, 0xe3, 0xdb, 0x1a, 0x00, 0x00, 0x20, 0x00, 0x49,
        0x44, 0x41, 0x54, 0x78, 0xda, 0xed, 0x9d, 0x79, 0x58, 0x54, 0x47, 0xba,
        0xc6, 0xdf, 0x6e, 0x9a, 0xad, 0x11, 0x49, 0x2b, 0x17, 0x34, 0x28, 0x41,
        0x1d, 0x8c, 0x8a, 0xc4, 0x08, 0xee, 0x4b, 0x5c, 0xe2, 0x86, 0xbb, 0x62,
        0x34, 0x68, 0xc0, 0x05, 0x65, 0x5f, 0x5c, 0xe6, 0x26, 0x13, 0x47, 0x12,
        0xb7, 0x18, 0x27, 0xd7, 0x71, 0x43, 0x01, 0xc5, 0x9d, 0x10, 0xa3, 0xd7,
        0xa8, 0x41, 0xc5, 0x25, 0x18, 0x34, 0x12, 0x83, 0xe3, 0x16, 0xc5, 0x35,
        0x44, 0x21, 0x46, 0x04, 0xbd, 0x12, 0x82, 0x20, 0xca, 0xda, 0xf7, 0x8f,
        0x5c, 0x72, 0xd5, 0x71, 0x03, 0xfa, 0x3b, 0xa7, 0x4e, 0xf7, 0xf7, 0x7b,
        0x9e, 0xfc, 0x61, 0xb4, 0xab, 0x4e, 0x55, 0x9d, 0x7a, 0x4f, 0x9d, 0x3a,
        0x5f, 0x7d, 0xaf, 0x4a, 0xaf, 0xd7, 0xeb, 0xc1, 0x30, 0x0c, 0xa3, 0x00,
        0xd4, 0xdc, 0x05, 0x0c, 0xc3, 0xb0, 0x60, 0x31, 0x0c, 0xc3, 0xb0, 0x60,
        0x31, 0x0c, 0xc3, 0x82, 0xc5, 0x30, 0x0c, 0xc3, 0x82, 0xc5, 0x30, 0x0c,
        0xc3, 0x82, 0xc5, 0x30, 0x0c, 0x0b, 0x16, 0xc3, 0x30, 0x0c, 0x0b, 0x16,
        0xc3, 0x30, 0x0c, 0x0b, 0x16, 0xc3, 0x30, 0xa6, 0x81, 0xa6, 0xa6, 0x3f,
        0xb8, 0x7b, 0xf7, 0x2e, 0xbe, 0xfe, 0xfa, 0x6b, 0xee, 0x39, 0x13, 0xa4,
        0xb2, 0xb2, 0x12, 0xa5, 0xa5, 0xa5, 0xa8, 0xa8, 0xa8, 0xc0, 0x83, 0x07,
        0x0f, 0x50, 0x56, 0x56, 0x86, 0xf2, 0xf2, 0x72, 0x54, 0x55, 0x55, 0xa1,
        0xb2, 0xb2, 0x12, 0x00, 0x50, 0x5e, 0x5e, 0xfe, 0xd8, 0x6f, 0xcc, 0xcd,
        0xcd, 0x01, 0x00, 0x66, 0x66, 0x66, 0x50, 0xab, 0xd5, 0x30, 0x37, 0x37,
        0x87, 0x85, 0x85, 0x05, 0xac, 0xad, 0xad, 0x61, 0x61, 0x61, 0x01, 0x73,
        0x73, 0x73, 0x98, 0x99, 0x99, 0x71, 0xe7, 0x9a, 0x20, 0x23, 0x46, 0x8c,
        0x80, 0xbd, 0xbd, 0x3d, 0xad, 0x60, 0xd9, 0xdb, 0xdb, 0xe3, 0xe7, 0x9f,
        0x7f, 0xc6, 0x8f, 0x3f, 0xfe, 0xc8, 0x3d, 0xce, 0x30, 0x4c, 0xad, 0x70,
        0x77, 0x77, 0x47, 0xc3, 0x86, 0x0d, 0xa5, 0x79, 0x25, 0x0c, 0x0f, 0x0f,
        0xff, 0xf3, 0xc9, 0xc9, 0x30, 0x0c, 0x53, 0x13, 0xcc, 0xcd, 0xcd, 0x11,
        0x11, 0x11, 0x01, 0x95, 0x4a, 0x25, 0x8d, 0x60, 0xbd, 0xfa, 0xea, 0xab,
        0x18, 0x3b, 0x76, 0x2c, 0xf7, 0x3c, 0xc3, 0x30, 0x35, 0xe6, 0xdd, 0x77,
        0xdf, 0x45, 0x93, 0x26, 0x4d, 0x6a, 0xf5, 0x5b, 0xb5, 0x1c, 0x95, 0x32,
        0x0c, 0x63, 0x9a, 0x38, 0x39, 0x39, 0x61, 0xcc, 0x98, 0x31, 0xb5, 0xfe,
        0x7d, 0xad, 0x05, 0x4b, 0xa3, 0xd1, 0x20, 0x24, 0x24, 0x84, 0x47, 0x80,
        0x61, 0x98, 0x97, 0x26, 0x34, 0x34, 0x14, 0x16, 0x16, 0x16, 0xd2, 0x0b,
        0x16, 0x00, 0xb4, 0x6f, 0xdf, 0x1e, 0x7d, 0xfa, 0xf4, 0xe1, 0x51, 0x60,
        0x18, 0xe6, 0x85, 0xf4, 0xed, 0xdb, 0x17, 0xed, 0xdb, 0xb7, 0xaf, 0x53,
        0x19, 0x75, 0x8e, 0xc3, 0x9a, 0x36, 0x6d, 0x1a, 0xea, 0xd5, 0xab, 0xc7,
        0xa3, 0xc1, 0x30, 0xcc, 0x33, 0xd1, 0x6a, 0xb5, 0x98, 0x32, 0x65, 0x4a,
        0x9d, 0xcb, 0xa9, 0xb3, 0x60, 0xe9, 0x74, 0x3a, 0x4c, 0x9c, 0x38, 0x91,
        0x47, 0x84, 0x61, 0x98, 0x67, 0xe2, 0xef, 0xef, 0x5f, 0xab, 0x30, 0x06,
        0x83, 0x0b, 0x16, 0x00, 0x0c, 0x19, 0x32, 0x04, 0xad, 0x5b, 0xb7, 0xe6,
        0x51, 0x61, 0x18, 0xe6, 0xdf, 0x68, 0xd9, 0xb2, 0x25, 0xbc, 0xbc, 0xbc,
        0x0c, 0x52, 0x96, 0x41, 0x04, 0x4b, 0xa5, 0x52, 0x21, 0x2c, 0x2c, 0x0c,
        0x6a, 0x35, 0x9f, 0xf4, 0x61, 0x18, 0xe6, 0x11, 0x81, 0x51, 0xab, 0x11,
        0x19, 0x19, 0x59, 0xab, 0x98, 0x2b, 0x32, 0xc1, 0x02, 0x80, 0xe6, 0xcd,
        0x9b, 0x63, 0xd4, 0xa8, 0x51, 0x3c, 0x42, 0x0c, 0xc3, 0xfc, 0xc9, 0xa8,
        0x51, 0xa3, 0xd0, 0xbc, 0x79, 0x73, 0xc3, 0x09, 0xa0, 0x21, 0x2f, 0xce,
        0xd7, 0xd7, 0x17, 0x0e, 0x0e, 0x0e, 0x3c, 0x4a, 0x0c, 0xc3, 0xc0, 0xde,
        0xde, 0x1e, 0x13, 0x26, 0x4c, 0x30, 0xec, 0x8a, 0xcd, 0x90, 0x85, 0x59,
        0x5a, 0x5a, 0x22, 0x30, 0x30, 0x90, 0x47, 0x8a, 0x61, 0x18, 0x04, 0x07,
        0x07, 0xc3, 0xda, 0xda, 0x5a, 0x5c, 0xc1, 0x02, 0x80, 0x6e, 0xdd, 0xba,
        0xa1, 0x4b, 0x97, 0x2e, 0x3c, 0x5a, 0x0c, 0x63, 0xc2, 0x74, 0xec, 0xd8,
        0x11, 0xdd, 0xba, 0x75, 0x33, 0x78, 0xb9, 0x24, 0xbb, 0xe4, 0xc1, 0xc1,
        0xc1, 0xb0, 0xb2, 0xb2, 0xe2, 0x51, 0x63, 0x18, 0x13, 0xc4, 0xd2, 0xd2,
        0x12, 0xa1, 0xa1, 0xa1, 0x24, 0x65, 0x93, 0x08, 0x96, 0x83, 0x83, 0x83,
        0xc1, 0xdf, 0x5d, 0x19, 0x86, 0x51, 0x06, 0xbe, 0xbe, 0xbe, 0x70, 0x74,
        0x74, 0x54, 0x8e, 0x60, 0x01, 0x7f, 0x7c, 0x1d, 0x68, 0xd6, 0xac, 0x19,
        0x8f, 0x1e, 0xc3, 0x98, 0x10, 0x2e, 0x2e, 0x2e, 0x18, 0x31, 0x62, 0x04,
        0x59, 0xf9, 0x64, 0x82, 0x65, 0x66, 0x66, 0x66, 0xd0, 0xf8, 0x0b, 0x86,
        0x61, 0xc4, 0xa6, 0x3a, 0x1e, 0x53, 0xa3, 0xd1, 0x90, 0xd5, 0x41, 0x1a,
        0xe9, 0xf9, 0xfa, 0xeb, 0xaf, 0x63, 0xd0, 0xa0, 0x41, 0x3c, 0x92, 0x0c,
        0x63, 0x02, 0x0c, 0x1a, 0x34, 0x08, 0x6e, 0x6e, 0x6e, 0xa4, 0x75, 0x90,
        0x87, 0xa6, 0xfb, 0xfb, 0xfb, 0x43, 0xa7, 0xd3, 0xf1, 0x68, 0x32, 0x8c,
        0x11, 0xa3, 0xd3, 0xe9, 0x0c, 0x72, 0xb8, 0xf9, 0x45, 0x68, 0xa8, 0x2b,
        0xb0, 0xb1, 0xb1, 0x81, 0xbf, 0xbf, 0x3f, 0x96, 0x2c, 0x59, 0x42, 0x5a,
        0x4f, 0xbf, 0x7e, 0xfd, 0xd0, 0xa6, 0x4d, 0x1b, 0xd9, 0x07, 0xee, 0xda,
        0xb5, 0x6b, 0x48, 0x49, 0x49, 0x41, 0x69, 0x69, 0xa9, 0xd1, 0xdd, 0x94,
        0x6a, 0xb5, 0x1a, 0x55, 0x55, 0x55, 0xc2, 0x97, 0x29, 0x02, 0x5a, 0xad,
        0x16, 0x7d, 0xfb, 0xf6, 0x35, 0x68, 0x94, 0x77, 0x6d, 0xb9, 0x74, 0xe9,
        0x12, 0x52, 0x52, 0x52, 0xc8, 0x17, 0x26, 0x52, 0x64, 0x6d, 0x51, 0xe9,
        0xf5, 0x7a, 0xbd, 0x14, 0x9d, 0xf6, 0xe1, 0x87, 0x1f, 0x92, 0x1a, 0x57,
        0x38, 0x39, 0x39, 0x21, 0x36, 0x36, 0x56, 0xb6, 0x5c, 0xf3, 0x65, 0x65,
        0x65, 0x88, 0x89, 0x89, 0xc1, 0xc1, 0x83, 0x07, 0x15, 0x3f, 0xd9, 0xec,
        0xed, 0xed, 0xd1, 0xac, 0x59, 0x33, 0xbc, 0xf6, 0xda, 0x6b, 0x70, 0x76,
        0x76, 0x46, 0xa3, 0x46, 0x8d, 0xe0, 0xe8, 0xe8, 0x88, 0x23, 0x47, 0x8e,
        0x60, 0xe3, 0xc6, 0x8d, 0x06, 0xad, 0x6b, 0xf2, 0xe4, 0xc9, 0xe8, 0xdd,
        0xbb, 0x37, 0x6e, 0xdf, 0xbe, 0x8d, 0xbc, 0xbc, 0x3c, 0xdc, 0xb8, 0x71,
        0x03, 0x59, 0x59, 0x59, 0xf8, 0xe5, 0x97, 0x5f, 0x70, 0xf7, 0xee, 0x5d,
        0xc5, 0xf7, 0xe5, 0xe0, 0xc1, 0x83, 0x11, 0x18, 0x18, 0x58, 0xa7, 0xa4,
        0x75, 0x75, 0xa1, 0xa2, 0xa2, 0x02, 0xc1, 0xc1, 0xc1, 0xb8, 0x79, 0xf3,
        0x26, 0x59, 0x1d, 0xee, 0xee, 0xee, 0xf8, 0xc7, 0x3f, 0xfe, 0x21, 0xc9,
        0x7e, 0xb5, 0x46, 0xaa, 0x8e, 0x0b, 0x0b, 0x0b, 0x43, 0x70, 0x70, 0xf0,
        0xbf, 0xd9, 0x40, 0x19, 0x8a, 0x9c, 0x9c, 0x1c, 0xec, 0xd8, 0xb1, 0x03,
        0x3e, 0x3e, 0x3e, 0x92, 0xdf, 0x14, 0x79, 0x79, 0x79, 0x98, 0x3f, 0x7f,
        0x3e, 0xb2, 0xb2, 0xb2, 0x14, 0xb9, 0x12, 0x68, 0xdd, 0xba, 0x35, 0xdc,
        0xdc, 0xdc, 0xd0, 0xba, 0x75, 0x6b, 0xfc, 0xe5, 0x2f, 0x7f, 0x79, 0xe6,
        0x93, 0x92, 0xe2, 0x86, 0x54, 0xa9, 0x54, 0x70, 0x70, 0x70, 0x80, 0x83,
        0x83, 0x03, 0xdc, 0xdd, 0xdd, 0x1f, 0xfb, 0xbb, 0xa2, 0xa2, 0x22, 0xfc,
        0xfc, 0xf3, 0xcf, 0xb8, 0x74, 0xe9, 0x12, 0x2e, 0x5f, 0xbe, 0x8c, 0xcb,
        0x97, 0x2f, 0xa3, 0xa4, 0xa4, 0x44, 0x51, 0xfd, 0x9b, 0x9c, 0x9c, 0x8c,
        0xcc, 0xcc, 0x4c, 0xcc, 0x99, 0x33, 0x47, 0x96, 0x63, 0x6b, 0xdb, 0xb6,
        0x6d, 0x23, 0x15, 0x2b, 0x8d, 0x46, 0x83, 0xb0, 0xb0, 0x30, 0xc9, 0x3e,
        0xae, 0x49, 0x26, 0x58, 0xd5, 0xb9, 0x9c, 0xb7, 0x6e, 0xdd, 0x4a, 0x56,
        0xc7, 0xd6, 0xad, 0x5b, 0xf1, 0xd6, 0x5b, 0x6f, 0xc1, 0xc9, 0xc9, 0x49,
        0xb2, 0x1b, 0xe2, 0xd4, 0xa9, 0x53, 0xf8, 0xc7, 0x3f, 0xfe, 0x81, 0xe2,
        0xe2, 0x62, 0x45, 0x4c, 0x20, 0x73, 0x73, 0x73, 0xb8, 0xb9, 0xb9, 0xa1,
        0x43, 0x87, 0x0e, 0xf0, 0xf4, 0xf4, 0xc4, 0x6b, 0xaf, 0xbd, 0x26, 0xec,
        0x97, 0x5c, 0x5b, 0x5b, 0x5b, 0xb4, 0x6f, 0xdf, 0xfe, 0xcf, 0x2c, 0x95,
        0x7a, 0xbd, 0x1e, 0x59, 0x59, 0x59, 0x38, 0x7b, 0xf6, 0x2c, 0x4e, 0x9d,
        0x3a, 0x85, 0x0b, 0x17, 0x2e, 0xa0, 0xa2, 0xa2, 0x42, 0xf8, 0x3e, 0xcf,
        0xcc, 0xcc, 0x44, 0x78, 0x78, 0x38, 0xde, 0x7f, 0xff, 0x7d, 0x78, 0x7a,
        0x7a, 0x4a, 0x56, 0x6f, 0x6e, 0x6e, 0x2e, 0xb6, 0x6f, 0xdf, 0x4e, 0x5a,
        0xc7, 0xb8, 0x71, 0xe3, 0xe0, 0xec, 0xec, 0x2c, 0x59, 0x9b, 0x34, 0x52,
        0x0e, 0x9c, 0x8f, 0x8f, 0x0f, 0xbe, 0xfb, 0xee, 0x3b, 0xe4, 0xe4, 0xe4,
        0x90, 0x94, 0x5f, 0x5e, 0x5e, 0x8e, 0x98, 0x98, 0x18, 0x7c, 0xf2, 0xc9,
        0x27, 0xe4, 0x6d, 0xd1, 0xeb, 0xf5, 0xf8, 0xe2, 0x8b, 0x2f, 0x90, 0x98,
        0x98, 0x08, 0x89, 0xde, 0xaa, 0x6b, 0x4d, 0xbd, 0x7a, 0xf5, 0xd0, 0xb5,
        0x6b, 0x57, 0x74, 0xef, 0xde, 0x1d, 0xed, 0xda, 0xb5, 0x53, 0xec, 0x29,
        0x04, 0x95, 0x4a, 0x85, 0xe6, 0xcd, 0x9b, 0xa3, 0x79, 0xf3, 0xe6, 0xf0,
        0xf6, 0xf6, 0xc6, 0x83, 0x07, 0x0f, 0x70, 0xee, 0xdc, 0x39, 0xfc, 0xf0,
        0xc3, 0x0f, 0x38, 0x7e, 0xfc, 0xb8, 0xd0, 0x0f, 0x8d, 0x7b, 0xf7, 0xee,
        0xe1, 0xa3, 0x8f, 0x3e, 0x82, 0x9f, 0x9f, 0x1f, 0xc6, 0x8e, 0x1d, 0x2b,
        0xc9, 0x43, 0x22, 0x36, 0x36, 0x16, 0x65, 0x65, 0x65, 0x64, 0xe5, 0x37,
        0x6e, 0xdc, 0x58, 0x72, 0xf7, 0x2c, 0x49, 0x05, 0xab, 0xda, 0x8f, 0xec,
        0x83, 0x0f, 0x3e, 0x20, 0xab, 0xe3, 0xcc, 0x99, 0x33, 0x38, 0x7a, 0xf4,
        0x28, 0x7a, 0xf5, 0xea, 0x45, 0x56, 0x47, 0x59, 0x59, 0x19, 0x96, 0x2c,
        0x59, 0x82, 0x63, 0xc7, 0x8e, 0x09, 0xfd, 0xaa, 0xd7, 0xad, 0x5b, 0x37,
        0xf4, 0xec, 0xd9, 0x13, 0x1e, 0x1e, 0x1e, 0xa4, 0xb1, 0x31, 0x72, 0x61,
        0x6d, 0x6d, 0x8d, 0x2e, 0x5d, 0xba, 0xa0, 0x4b, 0x97, 0x2e, 0x08, 0x0f,
        0x0f, 0xc7, 0xe9, 0xd3, 0xa7, 0xf1, 0xdd, 0x77, 0xdf, 0x21, 0x3d, 0x3d,
        0x5d, 0xc8, 0x57, 0xc7, 0xaa, 0xaa, 0x2a, 0x6c, 0xda, 0xb4, 0x09, 0xbf,
        0xfc, 0xf2, 0x0b, 0x66, 0xcc, 0x98, 0x41, 0xba, 0xdf, 0x7a, 0xe4, 0xc8,
        0x11, 0x9c, 0x3c, 0x79, 0x92, 0x7c, 0x9b, 0x47, 0xea, 0xbd, 0x39, 0xc9,
        0xef, 0xe2, 0x37, 0xde, 0x78, 0x03, 0xbd, 0x7a, 0xf5, 0xc2, 0xd1, 0xa3,
        0x47, 0xc9, 0xea, 0x58, 0xb3, 0x66, 0x0d, 0x3a, 0x74, 0xe8, 0x00, 0x1b,
        0x1b, 0x1b, 0x83, 0x97, 0x5d, 0x54, 0x54, 0x84, 0x79, 0xf3, 0xe6, 0xe1,
        0xe2, 0xc5, 0x8b, 0x42, 0x4e, 0x62, 0x57, 0x57, 0x57, 0x78, 0x79, 0x79,
        0xa1, 0x4f, 0x9f, 0x3e, 0x26, 0x75, 0x9e, 0x53, 0xa3, 0xd1, 0xa0, 0x73,
        0xe7, 0xce, 0xe8, 0xdc, 0xb9, 0x33, 0xca, 0xca, 0xca, 0x70, 0xe2, 0xc4,
        0x09, 0x24, 0x27, 0x27, 0x0b, 0xe9, 0x50, 0x9e, 0x9a, 0x9a, 0x8a, 0xdc,
        0xdc, 0x5c, 0xcc, 0x9d, 0x3b, 0x17, 0x76, 0x76, 0x76, 0x06, 0x2f, 0xbf,
        0xa4, 0xa4, 0x04, 0xeb, 0xd6, 0xad, 0x23, 0x6d, 0x43, 0x9f, 0x3e, 0x7d,
        0xe0, 0xe1, 0xe1, 0x21, 0x79, 0xdf, 0xc9, 0x92, 0x22, 0x34, 0x30, 0x30,
        0x90, 0xf4, 0x13, 0x68, 0x41, 0x41, 0x01, 0xb6, 0x6c, 0xd9, 0x62, 0xf0,
        0x72, 0x73, 0x72, 0x72, 0x10, 0x19, 0x19, 0x29, 0x9c, 0x58, 0x59, 0x59,
        0x59, 0x61, 0xf8, 0xf0, 0xe1, 0x88, 0x8d, 0x8d, 0xc5, 0xca, 0x95, 0x2b,
        0xe1, 0xe5, 0xe5, 0x65, 0xd2, 0x87, 0xcf, 0x2d, 0x2c, 0x2c, 0xd0, 0xb3,
        0x67, 0x4f, 0x7c, 0xfa, 0xe9, 0xa7, 0x88, 0x8d, 0x8d, 0xc5, 0xd0, 0xa1,
        0x43, 0x61, 0x69, 0x69, 0x29, 0xd4, 0x35, 0x5e, 0xb9, 0x72, 0x05, 0xb3,
        0x66, 0xcd, 0x42, 0x5e, 0x5e, 0x9e, 0xc1, 0xcb, 0xde, 0xb8, 0x71, 0x23,
        0xf2, 0xf3, 0xf3, 0x49, 0x57, 0xef, 0xfe, 0xfe, 0xfe, 0xb2, 0xf4, 0x9b,
        0x2c, 0x82, 0xa5, 0xd3, 0xe9, 0xe0, 0xe7, 0xe7, 0x47, 0x5a, 0xc7, 0x9e,
        0x3d, 0x7b, 0x70, 0xe5, 0xca, 0x15, 0x83, 0xde, 0x60, 0x33, 0x66, 0xcc,
        0x40, 0x6e, 0x6e, 0xae, 0x30, 0x37, 0x7d, 0xc3, 0x86, 0x0d, 0x31, 0x69,
        0xd2, 0x24, 0x24, 0x24, 0x24, 0x20, 0x38, 0x38, 0x18, 0x2e, 0x2e, 0x2e,
        0x60, 0x1e, 0xc7, 0xc5, 0xc5, 0x05, 0xa1, 0xa1, 0xa1, 0xd8, 0xbc, 0x79,
        0x33, 0xfc, 0xfc, 0xfc, 0x84, 0x0a, 0x62, 0xce, 0xc9, 0xc9, 0xc1, 0xf4,
        0xe9, 0xd3, 0x91, 0x99, 0x99, 0x69, 0xb0, 0x32, 0x33, 0x33, 0x33, 0x91,
        0x9c, 0x9c, 0x4c, 0x7a, 0xdd, 0x53, 0xa6, 0x4c, 0x31, 0x88, 0xa1, 0x84,
        0x62, 0x04, 0x0b, 0x00, 0x86, 0x0e, 0x1d, 0x8a, 0x56, 0xad, 0x5a, 0x91,
        0x95, 0xaf, 0xd7, 0xeb, 0xb1, 0x72, 0xe5, 0x4a, 0x54, 0x56, 0x56, 0xd6,
        0xb9, 0xac, 0x8c, 0x8c, 0x0c, 0xcc, 0x9e, 0x3d, 0x1b, 0x45, 0x45, 0x45,
        0x42, 0xdc, 0xe8, 0x8e, 0x8e, 0x8e, 0x98, 0x31, 0x63, 0x06, 0x36, 0x6d,
        0xda, 0x84, 0x71, 0xe3, 0xc6, 0xb1, 0xcd, 0xda, 0x4b, 0x60, 0x67, 0x67,
        0x07, 0x1f, 0x1f, 0x1f, 0x6c, 0xde, 0xbc, 0x19, 0x11, 0x11, 0x11, 0xc2,
        0x64, 0xc6, 0x2d, 0x2c, 0x2c, 0xc4, 0xdf, 0xfe, 0xf6, 0x37, 0x5c, 0xb8,
        0x70, 0xa1, 0xce, 0x65, 0x55, 0x55, 0x55, 0x61, 0xc5, 0x8a, 0x15, 0xa4,
        0x81, 0xb8, 0x86, 0x34, 0x94, 0x50, 0x94, 0x60, 0xa9, 0x54, 0x2a, 0x44,
        0x46, 0x46, 0xc2, 0xcc, 0xcc, 0x8c, 0xac, 0x8e, 0xac, 0xac, 0x2c, 0x24,
        0x25, 0x25, 0xd5, 0xa9, 0x8c, 0x73, 0xe7, 0xce, 0xe1, 0xa3, 0x8f, 0x3e,
        0xc2, 0x83, 0x07, 0x0f, 0x64, 0xbf, 0xb9, 0xed, 0xed, 0xed, 0x11, 0x10,
        0x10, 0x80, 0xf8, 0xf8, 0x78, 0x0c, 0x18, 0x30, 0xc0, 0x28, 0x37, 0xd2,
        0xa9, 0x31, 0x37, 0x37, 0x87, 0x97, 0x97, 0x17, 0xd6, 0xaf, 0x5f, 0x8f,
        0x88, 0x88, 0x08, 0xd9, 0x56, 0x0a, 0x8f, 0x52, 0x52, 0x52, 0x82, 0x39,
        0x73, 0xe6, 0xe0, 0xcc, 0x99, 0x33, 0x75, 0x2a, 0x27, 0x29, 0x29, 0x09,
        0xd7, 0xae, 0x5d, 0xa3, 0x13, 0x0b, 0xb5, 0x1a, 0x11, 0x11, 0x11, 0xb2,
        0x9a, 0xcd, 0xc8, 0x6a, 0x73, 0xe3, 0xe2, 0xe2, 0x82, 0xe1, 0xc3, 0x87,
        0x93, 0xd6, 0x91, 0x90, 0x90, 0x50, 0xeb, 0xf7, 0xf9, 0xe3, 0xc7, 0x8f,
        0x23, 0x2a, 0x2a, 0x0a, 0x0f, 0x1f, 0x3e, 0x94, 0xf5, 0x86, 0xd6, 0x6a,
        0xb5, 0x98, 0x3a, 0x75, 0x2a, 0x36, 0x6c, 0xd8, 0x80, 0x51, 0xa3, 0x46,
        0xc9, 0x16, 0xcd, 0x6f, 0x4c, 0x68, 0x34, 0x1a, 0x78, 0x79, 0x79, 0x61,
        0xc3, 0x86, 0x0d, 0xf0, 0xf7, 0xf7, 0x87, 0x56, 0xab, 0x95, 0xf5, 0x7a,
        0x4a, 0x4b, 0x4b, 0x31, 0x77, 0xee, 0x5c, 0x9c, 0x38, 0x71, 0xa2, 0x56,
        0xbf, 0xcf, 0xcf, 0xcf, 0x47, 0x42, 0x42, 0x02, 0xe9, 0x35, 0x8e, 0x18,
        0x31, 0x02, 0x2d, 0x5a, 0xb4, 0x90, 0xb5, 0x9f, 0x64, 0xf7, 0xe5, 0xf2,
        0xf3, 0xf3, 0x23, 0x5d, 0x9e, 0x3f, 0x78, 0xf0, 0x00, 0x71, 0x71, 0x71,
        0xb5, 0x12, 0xab, 0x45, 0x8b, 0x16, 0x91, 0x45, 0xe6, 0xbf, 0xec, 0x13,
        0xad, 0x7a, 0x52, 0x79, 0x7b, 0x7b, 0xb3, 0x50, 0x11, 0x60, 0x61, 0x61,
        0x81, 0x31, 0x63, 0xc6, 0x60, 0xdd, 0xba, 0x75, 0x18, 0x38, 0x70, 0xa0,
        0xac, 0x41, 0xb4, 0xe5, 0xe5, 0xe5, 0x58, 0xb0, 0x60, 0x01, 0xd2, 0xd3,
        0xd3, 0x6b, 0xfc, 0xdb, 0xb8, 0xb8, 0x38, 0xd2, 0x50, 0x0e, 0x7b, 0x7b,
        0x7b, 0xbc, 0xf7, 0xde, 0x7b, 0xb2, 0x8f, 0x97, 0xec, 0x82, 0x65, 0x65,
        0x65, 0x85, 0x80, 0x80, 0x00, 0xd2, 0x3a, 0xd2, 0xd2, 0xd2, 0x6a, 0x74,
        0x13, 0x9c, 0x3e, 0x7d, 0x1a, 0x8b, 0x17, 0x2f, 0x36, 0xc8, 0xfe, 0x57,
        0x6d, 0x71, 0x73, 0x73, 0x43, 0x74, 0x74, 0x34, 0x22, 0x22, 0x22, 0x48,
        0x3e, 0x7d, 0x33, 0x8f, 0xa3, 0xd3, 0xe9, 0x30, 0x7d, 0xfa, 0x74, 0x44,
        0x47, 0x47, 0x93, 0xee, 0xad, 0xbe, 0x88, 0xca, 0xca, 0x4a, 0x2c, 0x5a,
        0xb4, 0x08, 0xa7, 0x4f, 0x9f, 0x7e, 0xe9, 0xdf, 0x9c, 0x3a, 0x75, 0x0a,
        0x69, 0x69, 0x69, 0xa4, 0xd7, 0x15, 0x14, 0x14, 0x24, 0xfb, 0x2a, 0x54,
        0x08, 0xc1, 0x02, 0x80, 0xee, 0xdd, 0xbb, 0xa3, 0x73, 0xe7, 0xce, 0xa4,
        0x75, 0xc4, 0xc6, 0xc6, 0xbe, 0xd4, 0xab, 0xdd, 0xc5, 0x8b, 0x17, 0xb1,
        0x60, 0xc1, 0x02, 0xd9, 0x56, 0x56, 0x96, 0x96, 0x96, 0x98, 0x32, 0x65,
        0x0a, 0xfe, 0xeb, 0xbf, 0xfe, 0x4b, 0x88, 0x93, 0xfe, 0xa6, 0x46, 0x8b,
        0x16, 0x2d, 0xb0, 0x74, 0xe9, 0x52, 0x44, 0x44, 0x44, 0x18, 0xdc, 0xf1,
        0xa5, 0xa6, 0x2b, 0xad, 0x8c, 0x8c, 0x8c, 0x17, 0xfe, 0xdb, 0xb2, 0xb2,
        0x32, 0xac, 0x5e, 0xbd, 0x9a, 0xf4, 0x7a, 0x3c, 0x3d, 0x3d, 0xd1, 0xbd,
        0x7b, 0x77, 0x21, 0xc6, 0x47, 0x18, 0xab, 0xe6, 0x90, 0x90, 0x10, 0xd2,
        0xd8, 0xa1, 0x3b, 0x77, 0xee, 0xbc, 0xf0, 0x1c, 0xe3, 0x95, 0x2b, 0x57,
        0x10, 0x15, 0x15, 0x25, 0x5b, 0x6a, 0x98, 0xce, 0x9d, 0x3b, 0x63, 0xed,
        0xda, 0xb5, 0x78, 0xe7, 0x9d, 0x77, 0x38, 0x53, 0xab, 0x8c, 0xa8, 0x54,
        0x2a, 0x78, 0x79, 0x79, 0x21, 0x2e, 0x2e, 0x4e, 0xd2, 0xb3, 0x7f, 0x8f,
        0x52, 0xbd, 0xa7, 0x75, 0xf5, 0xea, 0xd5, 0xe7, 0xfe, 0xbb, 0xc4, 0xc4,
        0x44, 0x92, 0x58, 0xae, 0x47, 0x1f, 0xa0, 0x61, 0x61, 0x61, 0xc2, 0x8c,
        0x8d, 0x30, 0x82, 0xe5, 0xe0, 0xe0, 0x80, 0xf1, 0xe3, 0xc7, 0x93, 0xd6,
        0xb1, 0x63, 0xc7, 0x0e, 0x5c, 0xbf, 0x7e, 0xfd, 0xa9, 0x7f, 0x57, 0x1d,
        0x79, 0x2c, 0xc7, 0xd7, 0x40, 0x0b, 0x0b, 0x0b, 0x04, 0x04, 0x04, 0x60,
        0xee, 0xdc, 0xb9, 0x6c, 0x44, 0x2b, 0x10, 0x0e, 0x0e, 0x0e, 0x58, 0xb8,
        0x70, 0x21, 0x66, 0xcd, 0x9a, 0x25, 0x4b, 0xe0, 0x69, 0x49, 0x49, 0x09,
        0xa2, 0xa2, 0xa2, 0x9e, 0x79, 0xf6, 0x36, 0x3b, 0x3b, 0x1b, 0x5f, 0x7d,
        0xf5, 0x15, 0xe9, 0x35, 0x8c, 0x1f, 0x3f, 0x1e, 0x8d, 0x1a, 0x35, 0x62,
        0xc1, 0x7a, 0x1a, 0xa3, 0x47, 0x8f, 0x26, 0x35, 0xae, 0xa8, 0xaa, 0xaa,
        0x42, 0x4c, 0x4c, 0xcc, 0xbf, 0x1d, 0x56, 0x2e, 0x2c, 0x2c, 0x44, 0x54,
        0x54, 0x14, 0x0a, 0x0b, 0x0b, 0x25, 0x6f, 0x73, 0xcb, 0x96, 0x2d, 0x11,
        0x13, 0x13, 0x83, 0x51, 0xa3, 0x46, 0xb1, 0x42, 0x08, 0x4a, 0xbf, 0x7e,
        0xfd, 0xb0, 0x72, 0xe5, 0x4a, 0x59, 0xbe, 0x90, 0x15, 0x15, 0x15, 0x3d,
        0xf5, 0xde, 0xd4, 0xeb, 0xf5, 0x88, 0x8d, 0x8d, 0x25, 0xdd, 0x67, 0x75,
        0x71, 0x71, 0xc1, 0xe8, 0xd1, 0xa3, 0x85, 0x1a, 0x0b, 0xa1, 0x04, 0xcb,
        0xcc, 0xcc, 0x0c, 0x11, 0x11, 0x11, 0xa4, 0xaf, 0x43, 0x17, 0x2f, 0x5e,
        0xc4, 0x37, 0xdf, 0x7c, 0xf3, 0xd8, 0x1e, 0xc0, 0xdc, 0xb9, 0x73, 0xc9,
        0x32, 0x48, 0x3c, 0x8f, 0x77, 0xde, 0x79, 0x07, 0xff, 0xfc, 0xe7, 0x3f,
        0x25, 0x4d, 0x87, 0xc3, 0xd4, 0x0e, 0x67, 0x67, 0x67, 0x2c, 0x5f, 0xbe,
        0x5c, 0x96, 0x07, 0x4b, 0x6e, 0x6e, 0x2e, 0x16, 0x2c, 0x58, 0xf0, 0x58,
        0xe6, 0x85, 0x83, 0x07, 0x0f, 0xe2, 0xfc, 0xf9, 0xf3, 0xa4, 0xf5, 0x52,
        0x1b, 0x4a, 0x28, 0x5e, 0xb0, 0x00, 0xa0, 0x55, 0xab, 0x56, 0x18, 0x30,
        0x60, 0x00, 0x69, 0x1d, 0xf1, 0xf1, 0xf1, 0x28, 0x2c, 0x2c, 0x84, 0x5e,
        0xaf, 0xc7, 0xf2, 0xe5, 0xcb, 0x0d, 0x7a, 0x84, 0xe7, 0x65, 0xb0, 0xb2,
        0xb2, 0xc2, 0xec, 0xd9, 0xb3, 0x31, 0x65, 0xca, 0x14, 0x0e, 0xfe, 0x54,
        0x10, 0x1a, 0x8d, 0x06, 0x01, 0x01, 0x01, 0x88, 0x8a, 0x8a, 0x92, 0xfc,
        0x8b, 0xd9, 0xc5, 0x8b, 0x17, 0xb1, 0x64, 0xc9, 0x12, 0xe8, 0xf5, 0x7a,
        0x14, 0x16, 0x16, 0x62, 0xd3, 0xa6, 0x4d, 0xa4, 0xf5, 0x0d, 0x1c, 0x38,
        0x90, 0xdc, 0x50, 0xa2, 0x56, 0x63, 0x20, 0xe2, 0x8d, 0xe1, 0xef, 0xef,
        0x8f, 0xf4, 0xf4, 0x74, 0xb2, 0x57, 0xb4, 0xe2, 0xe2, 0x62, 0x6c, 0xd8,
        0xb0, 0x01, 0xf6, 0xf6, 0xf6, 0x48, 0x4d, 0x4d, 0x95, 0xb4, 0x6d, 0x4e,
        0x4e, 0x4e, 0x98, 0x33, 0x67, 0x0e, 0x9f, 0xfb, 0x53, 0x30, 0xdd, 0xba,
        0x75, 0x83, 0xb3, 0xb3, 0x33, 0x16, 0x2c, 0x58, 0x80, 0x1b, 0x37, 0x6e,
        0x48, 0x56, 0xef, 0xb1, 0x63, 0xc7, 0xe0, 0xe2, 0xe2, 0x82, 0xdc, 0xdc,
        0x5c, 0xd2, 0xed, 0x0b, 0x5b, 0x5b, 0x5b, 0x49, 0x0c, 0x25, 0x8c, 0x62,
        0x85, 0x55, 0xdd, 0x61, 0xd4, 0xa7, 0xc1, 0x0f, 0x1d, 0x3a, 0x84, 0xc4,
        0xc4, 0x44, 0x49, 0xdb, 0xe5, 0xe1, 0xe1, 0x81, 0x95, 0x2b, 0x57, 0xb2,
        0x58, 0x19, 0x01, 0x4d, 0x9a, 0x34, 0xc1, 0xd2, 0xa5, 0x4b, 0xd1, 0xae,
        0x5d, 0x3b, 0x49, 0xeb, 0xfd, 0xfc, 0xf3, 0xcf, 0xc9, 0x0d, 0x25, 0x02,
        0x02, 0x02, 0x50, 0xbf, 0x7e, 0x7d, 0x16, 0xac, 0x9a, 0xd0, 0xaf, 0x5f,
        0x3f, 0xf2, 0x9b, 0x41, 0xca, 0xd0, 0x81, 0x01, 0x03, 0x06, 0x60, 0xde,
        0xbc, 0x79, 0x42, 0x04, 0xdf, 0x31, 0x86, 0xc1, 0xc6, 0xc6, 0x06, 0x9f,
        0x7c, 0xf2, 0x89, 0xa4, 0x87, 0x81, 0xa9, 0xb3, 0xdb, 0xba, 0xb9, 0xb9,
        0xe1, 0xed, 0xb7, 0xdf, 0x16, 0xb6, 0xcf, 0x85, 0x15, 0x2c, 0x95, 0x4a,
        0x85, 0xf0, 0xf0, 0x70, 0xa3, 0x38, 0x8e, 0xe2, 0xe7, 0xe7, 0x87, 0x19,
        0x33, 0x66, 0xf0, 0x7e, 0x95, 0x11, 0x62, 0x66, 0x66, 0x86, 0xf0, 0xf0,
        0x70, 0xf8, 0xfa, 0xfa, 0x2a, 0xbe, 0x2d, 0x1a, 0x8d, 0x46, 0x78, 0xb7,
        0x76, 0xb5, 0xc8, 0x1d, 0xe8, 0xe4, 0xe4, 0x04, 0x6f, 0x6f, 0x6f, 0xc5,
        0xde, 0x00, 0x2a, 0x95, 0x0a, 0x11, 0x11, 0x11, 0xb2, 0x38, 0xf9, 0x30,
        0xd2, 0x8e, 0xf3, 0xf8, 0xf1, 0xe3, 0x11, 0x1a, 0x1a, 0xaa, 0xe8, 0x80,
        0xdf, 0xb1, 0x63, 0xc7, 0xa2, 0x69, 0xd3, 0xa6, 0x42, 0x5f, 0xa3, 0x5a,
        0xf4, 0x4e, 0x1c, 0x3f, 0x7e, 0xbc, 0x22, 0x3f, 0xfb, 0xab, 0xd5, 0x6a,
        0xcc, 0x98, 0x31, 0x43, 0xd6, 0xdc, 0x41, 0x8c, 0xb4, 0x0c, 0x1d, 0x3a,
        0x14, 0xef, 0xbf, 0xff, 0xbe, 0xac, 0xe9, 0x57, 0x6a, 0x4b, 0xe3, 0xc6,
        0x8d, 0x31, 0x6e, 0xdc, 0x38, 0xf1, 0xe7, 0x95, 0xe8, 0x17, 0x68, 0x6e,
        0x6e, 0x8e, 0x90, 0x90, 0x10, 0xc5, 0x2d, 0xad, 0x67, 0xcf, 0x9e, 0x8d,
        0xfe, 0xfd, 0xfb, 0xf3, 0x2c, 0x36, 0x31, 0x7a, 0xf7, 0xee, 0x8d, 0x0f,
        0x3f, 0xfc, 0x50, 0x71, 0xaf, 0xff, 0x41, 0x41, 0x41, 0xb2, 0x99, 0xbd,
        0x1a, 0x95, 0x60, 0x01, 0x7f, 0x7c, 0x5d, 0xeb, 0xd9, 0xb3, 0xa7, 0x62,
        0x56, 0x56, 0xef, 0xbf, 0xff, 0xbe, 0x30, 0x87, 0x45, 0x19, 0xe9, 0xe9,
        0xd1, 0xa3, 0x07, 0x3e, 0xfc, 0xf0, 0x43, 0xc5, 0xac, 0xb4, 0x7a, 0xf5,
        0xea, 0x85, 0x4e, 0x9d, 0x3a, 0x29, 0x63, 0x7e, 0x29, 0xe9, 0x09, 0x20,
        0xfa, 0x17, 0x36, 0x95, 0x4a, 0x85, 0xbf, 0xfe, 0xf5, 0xaf, 0x8a, 0x11,
        0x57, 0x86, 0x8e, 0x6e, 0xdd, 0xba, 0x61, 0xe6, 0xcc, 0x99, 0xc2, 0xef,
        0x69, 0x69, 0xb5, 0x5a, 0x4c, 0x9b, 0x36, 0x4d, 0x31, 0xfd, 0xaa, 0x18,
        0xc1, 0x6a, 0xd0, 0xa0, 0x01, 0x26, 0x4e, 0x9c, 0x28, 0xf4, 0x35, 0x86,
        0x85, 0x85, 0xa1, 0x4f, 0x9f, 0x3e, 0x3c, 0x5b, 0x19, 0x00, 0xc0, 0xdb,
        0x6f, 0xbf, 0x8d, 0xe9, 0xd3, 0xa7, 0x0b, 0x7d, 0x8d, 0x13, 0x27, 0x4e,
        0x14, 0x22, 0x4d, 0xb4, 0xd1, 0x09, 0x16, 0x00, 0x0c, 0x1b, 0x36, 0x4c,
        0xd6, 0xe4, 0x6a, 0xcf, 0x63, 0xd2, 0xa4, 0x49, 0x18, 0x3c, 0x78, 0x30,
        0xcf, 0x52, 0xe6, 0x31, 0x06, 0x0c, 0x18, 0x40, 0xee, 0x10, 0x55, 0x5b,
        0x5c, 0x5d, 0x5d, 0x31, 0x74, 0xe8, 0x50, 0x45, 0xf5, 0xa7, 0xa2, 0x04,
        0xab, 0x3a, 0x36, 0x4b, 0xb4, 0xbd, 0x81, 0x81, 0x03, 0x07, 0x2a, 0xe2,
        0x0b, 0x0b, 0x23, 0x0f, 0x3e, 0x3e, 0x3e, 0x18, 0x32, 0x64, 0x88, 0x58,
        0x13, 0x5f, 0xad, 0x16, 0x72, 0x2e, 0x19, 0x95, 0x60, 0x01, 0x40, 0xf3,
        0xe6, 0xcd, 0xc9, 0x8d, 0x2b, 0x6a, 0x82, 0x87, 0x87, 0x07, 0xc2, 0xc3,
        0xc3, 0x79, 0x56, 0x32, 0xcf, 0x25, 0x28, 0x28, 0x48, 0x16, 0xa7, 0xe4,
        0xe7, 0xbd, 0xad, 0xb8, 0xba, 0xba, 0x2a, 0xae, 0x1f, 0xd5, 0x4a, 0x1c,
        0x7c, 0x5f, 0x5f, 0x5f, 0xd8, 0xdb, 0xdb, 0xcb, 0x7e, 0x1d, 0xce, 0xce,
        0xce, 0xf8, 0xfb, 0xdf, 0xff, 0x4e, 0x6a, 0x55, 0xc6, 0x18, 0x07, 0xd5,
        0xa1, 0x2e, 0x4d, 0x9a, 0x34, 0x91, 0xfd, 0x5a, 0x74, 0x3a, 0x9d, 0x62,
        0x23, 0xf3, 0x15, 0x29, 0x58, 0x5a, 0xad, 0x16, 0x81, 0x81, 0x81, 0xb2,
        0x5e, 0x83, 0xb5, 0xb5, 0x35, 0xe6, 0xcc, 0x99, 0xc3, 0x67, 0x03, 0x99,
        0x97, 0xc6, 0xc6, 0xc6, 0x06, 0x1f, 0x7f, 0xfc, 0xb1, 0xec, 0xf7, 0x4c,
        0x48, 0x48, 0x08, 0x6c, 0x6c, 0x6c, 0x58, 0xb0, 0xa4, 0xa4, 0x47, 0x8f,
        0x1e, 0xe4, 0xc6, 0x15, 0xcf, 0x63, 0xe6, 0xcc, 0x99, 0xc2, 0x1f, 0x63,
        0x60, 0xc4, 0xa3, 0x49, 0x93, 0x26, 0x98, 0x35, 0x6b, 0x96, 0x6c, 0xf5,
        0x7b, 0x7a, 0x7a, 0xa2, 0x47, 0x8f, 0x1e, 0x8a, 0xed, 0x3f, 0xb5, 0x92,
        0x07, 0x3f, 0x38, 0x38, 0x58, 0x96, 0x5c, 0xdb, 0xe3, 0xc6, 0x8d, 0x53,
        0xf4, 0xa0, 0x33, 0xf2, 0xd2, 0xad, 0x5b, 0x37, 0x59, 0xce, 0xc8, 0x5a,
        0x58, 0x58, 0x08, 0x65, 0x28, 0x61, 0x72, 0x82, 0xe5, 0xe8, 0xe8, 0x28,
        0xf9, 0xc1, 0xe2, 0xd6, 0xad, 0x5b, 0x1b, 0xc5, 0xc9, 0x7c, 0x46, 0x5e,
        0x26, 0x4d, 0x9a, 0x84, 0x96, 0x2d, 0x5b, 0x4a, 0x5a, 0xa7, 0x68, 0x86,
        0x12, 0x26, 0x27, 0x58, 0x00, 0x30, 0x66, 0xcc, 0x18, 0x52, 0xe3, 0x8a,
        0x47, 0xb1, 0xb2, 0xb2, 0xc2, 0xac, 0x59, 0xb3, 0x78, 0x93, 0x9d, 0xa9,
        0x33, 0x1a, 0x8d, 0x06, 0x7f, 0xfb, 0xdb, 0xdf, 0x24, 0xf3, 0x3e, 0x74,
        0x76, 0x76, 0x56, 0x74, 0xe6, 0x13, 0xa3, 0x11, 0x2c, 0x33, 0x33, 0x33,
        0xc9, 0x0e, 0x47, 0x87, 0x86, 0x86, 0xb2, 0x61, 0x04, 0x63, 0x30, 0x1a,
        0x37, 0x6e, 0x4c, 0xee, 0x7a, 0xfe, 0xe8, 0xbd, 0x6b, 0x0c, 0xf9, 0xd8,
        0xd4, 0xc6, 0x30, 0xf0, 0x6d, 0xdb, 0xb6, 0x25, 0x5f, 0x65, 0x99, 0x9b,
        0x9b, 0x2b, 0xe6, 0x80, 0x28, 0xa3, 0x1c, 0xba, 0x77, 0xef, 0x4e, 0x9e,
        0xa4, 0xb2, 0x59, 0xb3, 0x66, 0x78, 0xe3, 0x8d, 0x37, 0x8c, 0xa2, 0xbf,
        0x8c, 0x42, 0xb0, 0x0a, 0x0b, 0x0b, 0x71, 0xeb, 0xd6, 0x2d, 0xd2, 0x3a,
        0xca, 0xcb, 0xcb, 0xb1, 0x61, 0xc3, 0x06, 0x9e, 0x61, 0x8c, 0x41, 0x89,
        0x8f, 0x8f, 0x47, 0x79, 0x79, 0x39, 0x69, 0x1d, 0xb7, 0x6e, 0xdd, 0xc2,
        0xef, 0xbf, 0xff, 0xce, 0x82, 0x25, 0x0a, 0xdb, 0xb6, 0x6d, 0x93, 0xc4,
        0x5e, 0x5e, 0x0a, 0x2f, 0x38, 0xc6, 0x74, 0xb8, 0x70, 0xe1, 0xc2, 0x63,
        0x1e, 0x99, 0x54, 0x94, 0x96, 0x96, 0x62, 0xe7, 0xce, 0x9d, 0x2c, 0x58,
        0x22, 0x50, 0x5c, 0x5c, 0x8c, 0xfd, 0xfb, 0xf7, 0x4b, 0x56, 0xdf, 0xea,
        0xd5, 0xab, 0x51, 0x51, 0x51, 0xc1, 0xb3, 0x8d, 0xa9, 0x13, 0x95, 0x95,
        0x95, 0x88, 0x89, 0x89, 0x91, 0xac, 0xbe, 0xbd, 0x7b, 0xf7, 0xe2, 0xfe,
        0xfd, 0xfb, 0x2c, 0x58, 0x72, 0xb3, 0x6f, 0xdf, 0x3e, 0x3c, 0x7c, 0xf8,
        0x50, 0xb2, 0xfa, 0x6e, 0xdc, 0xb8, 0x81, 0x5d, 0xbb, 0x76, 0xf1, 0x8c,
        0x63, 0xea, 0xc4, 0x8e, 0x1d, 0x3b, 0x90, 0x95, 0x95, 0x25, 0x59, 0x7d,
        0x0f, 0x1e, 0x3c, 0x90, 0xf4, 0xc1, 0xce, 0x82, 0xf5, 0x14, 0x2a, 0x2a,
        0x2a, 0xb0, 0x77, 0xef, 0x5e, 0xc9, 0xeb, 0xfd, 0xfc, 0xf3, 0xcf, 0x91,
        0x97, 0x97, 0xc7, 0xb3, 0x8e, 0xa9, 0x15, 0x77, 0xee, 0xdc, 0xc1, 0xd6,
        0xad, 0x5b, 0x25, 0xaf, 0x77, 0xf7, 0xee, 0xdd, 0x8a, 0x7f, 0x3b, 0x50,
        0xb4, 0x60, 0xa5, 0xa6, 0xa6, 0xe2, 0xee, 0xdd, 0xbb, 0x92, 0xd7, 0x5b,
        0x56, 0x56, 0x86, 0x55, 0xab, 0x56, 0xf1, 0xcc, 0x63, 0x6a, 0x45, 0x4c,
        0x4c, 0x8c, 0x24, 0x7b, 0xae, 0x4f, 0x92, 0x9f, 0x9f, 0x8f, 0x23, 0x47,
        0x8e, 0xb0, 0x60, 0xc9, 0x85, 0x9c, 0xaf, 0x66, 0xa7, 0x4f, 0x9f, 0x46,
        0x5a, 0x5a, 0x1a, 0xcf, 0x3e, 0xa6, 0x46, 0xa4, 0xa5, 0xa5, 0xe1, 0xc4,
        0x89, 0x13, 0xb2, 0xd5, 0xaf, 0xf4, 0xcd, 0x77, 0xc5, 0x0a, 0xd6, 0xe5,
        0xcb, 0x97, 0x25, 0xdd, 0x03, 0x78, 0xd6, 0x93, 0xd2, 0x18, 0x36, 0x32,
        0x19, 0x69, 0x28, 0x29, 0x29, 0xc1, 0x9a, 0x35, 0x6b, 0x64, 0xbd, 0x86,
        0xac, 0xac, 0x2c, 0x5c, 0xbd, 0x7a, 0x95, 0x05, 0x4b, 0x6a, 0x0e, 0x1c,
        0x38, 0x20, 0xfb, 0x35, 0x14, 0x14, 0x14, 0x20, 0x21, 0x21, 0x81, 0x67,
        0x22, 0xf3, 0x52, 0x24, 0x24, 0x24, 0xc8, 0xb2, 0x85, 0xf1, 0x24, 0x4a,
        0xde, 0x7c, 0x57, 0xa4, 0x60, 0xdd, 0xbf, 0x7f, 0x1f, 0x47, 0x8f, 0x1e,
        0x15, 0xe2, 0x5a, 0xf6, 0xec, 0xd9, 0x83, 0xcc, 0xcc, 0x4c, 0x9e, 0x8d,
        0xcc, 0x73, 0xb9, 0x7e, 0xfd, 0x3a, 0x92, 0x92, 0x92, 0x84, 0xb8, 0x96,
        0xa3, 0x47, 0x8f, 0xa2, 0xa4, 0xa4, 0x84, 0x05, 0x4b, 0x2a, 0x8e, 0x1c,
        0x39, 0x22, 0xcb, 0xa6, 0xe5, 0xd3, 0xa8, 0xaa, 0xaa, 0x42, 0x74, 0x74,
        0x34, 0xaa, 0xaa, 0xaa, 0x78, 0x56, 0x32, 0x4f, 0x45, 0xaf, 0xd7, 0x0b,
        0x75, 0x8f, 0x3c, 0x7c, 0xf8, 0x50, 0x98, 0x07, 0xbe, 0x49, 0x08, 0x96,
        0x68, 0x4b, 0xda, 0xcc, 0xcc, 0x4c, 0xec, 0xdb, 0xb7, 0x8f, 0x67, 0x26,
        0xf3, 0xcc, 0x55, 0xf8, 0x95, 0x2b, 0x57, 0x84, 0xba, 0x26, 0x11, 0xb6,
        0x54, 0x4c, 0x42, 0xb0, 0x6e, 0xde, 0xbc, 0x89, 0x6b, 0xd7, 0xae, 0x09,
        0x77, 0x5d, 0x9b, 0x36, 0x6d, 0x42, 0x7e, 0x7e, 0x3e, 0xcf, 0x4e, 0xe6,
        0x31, 0x7e, 0xfb, 0xed, 0x37, 0x6c, 0xde, 0xbc, 0x59, 0xb8, 0xeb, 0xfa,
        0xe9, 0xa7, 0x9f, 0xc8, 0xcf, 0xdf, 0xb2, 0x60, 0xfd, 0xdf, 0xeb, 0xa0,
        0x88, 0x94, 0x94, 0x94, 0x20, 0x3e, 0x3e, 0x9e, 0x67, 0x28, 0xf3, 0x18,
        0x71, 0x71, 0x71, 0xc2, 0xee, 0x17, 0x1d, 0x3b, 0x76, 0x8c, 0x05, 0xcb,
        0x94, 0x3b, 0xf9, 0xe8, 0xd1, 0xa3, 0xf8, 0xd7, 0xbf, 0xfe, 0xc5, 0xb3,
        0x94, 0x01, 0x00, 0x9c, 0x39, 0x73, 0x46, 0xf8, 0xfb, 0x95, 0x05, 0x8b,
        0x90, 0xec, 0xec, 0x6c, 0xdc, 0xb8, 0x71, 0x43, 0xf8, 0x27, 0x6a, 0x59,
        0x59, 0x19, 0xcf, 0x56, 0x13, 0xa7, 0xbc, 0xbc, 0x5c, 0xd2, 0xc3, 0xcd,
        0xb5, 0x21, 0x2b, 0x2b, 0x0b, 0xbf, 0xfe, 0xfa, 0x2b, 0x0b, 0x16, 0x15,
        0xdf, 0x7d, 0xf7, 0x9d, 0xf0, 0xd7, 0x98, 0x9b, 0x9b, 0x8b, 0x6d, 0xdb,
        0xb6, 0xf1, 0x8c, 0x35, 0x71, 0xbe, 0xf8, 0xe2, 0x0b, 0xe4, 0xe4, 0xe4,
        0xf0, 0x9c, 0x32, 0x65, 0xc1, 0x4a, 0x4f, 0x4f, 0x57, 0xc4, 0x75, 0x6e,
        0xdf, 0xbe, 0x5d, 0x71, 0x4f, 0x2e, 0xc6, 0x70, 0xe4, 0xe4, 0xe4, 0xe0,
        0xab, 0xaf, 0xbe, 0x52, 0xc4, 0xb5, 0x2a, 0x6d, 0x0b, 0x43, 0x31, 0x82,
        0x95, 0x9f, 0x9f, 0x2f, 0xfb, 0x51, 0x9c, 0x97, 0xa5, 0xa2, 0xa2, 0x02,
        0x2b, 0x56, 0xac, 0x80, 0x5e, 0xaf, 0xe7, 0xd9, 0x6b, 0x82, 0x44, 0x47,
        0x47, 0x93, 0x67, 0x11, 0x35, 0x14, 0x99, 0x99, 0x99, 0x28, 0x2c, 0x2c,
        0x64, 0xc1, 0x32, 0x34, 0xa7, 0x4f, 0x9f, 0x56, 0xd4, 0x4d, 0x7b, 0xf1,
        0xe2, 0x45, 0x1c, 0x3e, 0x7c, 0x98, 0x67, 0xaf, 0x89, 0x91, 0x92, 0x92,
        0x82, 0x73, 0xe7, 0xce, 0x29, 0xe6, 0x7a, 0xf5, 0x7a, 0x3d, 0xce, 0x9c,
        0x39, 0xc3, 0x82, 0x65, 0x68, 0x4e, 0x9d, 0x3a, 0xa5, 0xb8, 0x9b, 0x77,
        0xed, 0xda, 0xb5, 0xb8, 0x77, 0xef, 0x1e, 0xcf, 0x62, 0x13, 0xa1, 0xa8,
        0xa8, 0x08, 0xeb, 0xd6, 0xad, 0x53, 0xdc, 0x75, 0x9f, 0x3c, 0x79, 0x92,
        0x05, 0xcb, 0x90, 0x54, 0x55, 0x55, 0xe1, 0xec, 0xd9, 0xb3, 0x06, 0x2f,
        0xb7, 0x61, 0xc3, 0x86, 0xb0, 0xb3, 0xb3, 0x23, 0xbd, 0x81, 0xd9, 0xb8,
        0xc2, 0x74, 0x58, 0xbf, 0x7e, 0x3d, 0xe9, 0xeb, 0x55, 0xbd, 0x7a, 0xf5,
        0xa0, 0xd3, 0xe9, 0x48, 0xde, 0x5e, 0x94, 0xb2, 0x7d, 0xa1, 0x08, 0xc1,
        0xca, 0xcc, 0xcc, 0x44, 0x71, 0x71, 0xb1, 0xc1, 0xcb, 0xed, 0xdd, 0xbb,
        0x37, 0x26, 0x4d, 0x9a, 0x44, 0x7a, 0xed, 0x07, 0x0f, 0x1e, 0xc4, 0xc5,
        0x8b, 0x17, 0x79, 0x36, 0x1b, 0x39, 0x57, 0xae, 0x5c, 0xc1, 0xa1, 0x43,
        0x87, 0x48, 0xeb, 0x98, 0x36, 0x6d, 0x1a, 0x7a, 0xf5, 0xea, 0x65, 0xf0,
        0x72, 0xef, 0xdd, 0xbb, 0x87, 0xeb, 0xd7, 0xaf, 0xb3, 0x60, 0x19, 0x8a,
        0xcb, 0x97, 0x2f, 0x93, 0x94, 0xdb, 0xa5, 0x4b, 0x17, 0x0c, 0x1c, 0x38,
        0x10, 0xee, 0xee, 0xee, 0xa4, 0xd7, 0xbf, 0x6a, 0xd5, 0x2a, 0x36, 0xae,
        0x30, 0x62, 0x2a, 0x2b, 0x2b, 0xb1, 0x72, 0xe5, 0x4a, 0xd2, 0x55, 0x8a,
        0x9b, 0x9b, 0x1b, 0xfa, 0xf7, 0xef, 0x8f, 0xae, 0x5d, 0xbb, 0x92, 0x94,
        0xaf, 0x94, 0x87, 0xaa, 0x22, 0x04, 0x8b, 0xa2, 0x33, 0xb5, 0x5a, 0x2d,
        0x5a, 0xb7, 0x6e, 0x0d, 0x95, 0x4a, 0x85, 0x90, 0x90, 0x10, 0x52, 0xfb,
        0xf9, 0xec, 0xec, 0x6c, 0xec, 0xde, 0xbd, 0x9b, 0x67, 0xb6, 0x91, 0xf2,
        0xd5, 0x57, 0x5f, 0x91, 0x7e, 0xc1, 0x56, 0xab, 0xd5, 0x08, 0x09, 0x09,
        0x81, 0x4a, 0xa5, 0x42, 0x9b, 0x36, 0x6d, 0xa0, 0xd5, 0x6a, 0x0d, 0x5e,
        0xc7, 0xa5, 0x4b, 0x97, 0x58, 0xb0, 0x44, 0x16, 0x2c, 0x4f, 0x4f, 0xcf,
        0x3f, 0x45, 0xca, 0xc5, 0xc5, 0x05, 0xde, 0xde, 0xde, 0xa4, 0x6d, 0x60,
        0xe3, 0x0a, 0xe3, 0x44, 0x0a, 0x43, 0x89, 0x31, 0x63, 0xc6, 0xa0, 0x79,
        0xf3, 0xe6, 0x00, 0x00, 0x8d, 0x46, 0x43, 0xe2, 0xe2, 0x7c, 0xe1, 0xc2,
        0x05, 0x16, 0x2c, 0x43, 0x90, 0x97, 0x97, 0x87, 0x82, 0x82, 0x02, 0x83,
        0x97, 0xdb, 0xa1, 0x43, 0x87, 0xc7, 0xfe, 0x3c, 0x61, 0xc2, 0x04, 0x34,
        0x6a, 0xd4, 0x88, 0xac, 0x1d, 0xa5, 0xa5, 0xa5, 0x6c, 0x5c, 0x61, 0x84,
        0xc4, 0xc4, 0xc4, 0x90, 0xda, 0xcc, 0x39, 0x38, 0x38, 0xc0, 0xc7, 0xc7,
        0xe7, 0xb1, 0xff, 0xd7, 0xb1, 0x63, 0x47, 0x83, 0xd7, 0x93, 0x9f, 0x9f,
        0x8f, 0x3b, 0x77, 0xee, 0xb0, 0x60, 0xd5, 0x15, 0xaa, 0xfd, 0x2b, 0x0f,
        0x0f, 0x8f, 0xc7, 0xfe, 0x6c, 0x61, 0x61, 0x81, 0xd0, 0xd0, 0x50, 0xd2,
        0xb6, 0x9c, 0x3e, 0x7d, 0x1a, 0xc7, 0x8f, 0x1f, 0xe7, 0x59, 0x6e, 0x24,
        0x7c, 0xff, 0xfd, 0xf7, 0xe4, 0x86, 0x12, 0x21, 0x21, 0x21, 0xb0, 0xb2,
        0xb2, 0x7a, 0xee, 0xbd, 0x6b, 0x4a, 0xaf, 0x85, 0xc2, 0x0b, 0x16, 0x45,
        0xee, 0x2b, 0x07, 0x07, 0x07, 0xd8, 0xdb, 0xdb, 0x3f, 0x75, 0xd5, 0xd5,
        0xa3, 0x47, 0x0f, 0xd2, 0xf6, 0xc4, 0xc6, 0xc6, 0xe2, 0xc1, 0x83, 0x07,
        0x3c, 0xdb, 0x15, 0x4e, 0x69, 0x69, 0x29, 0xd6, 0xae, 0x5d, 0x4b, 0x5a,
        0x47, 0x8f, 0x1e, 0x3d, 0xd0, 0xb9, 0x73, 0xe7, 0x7f, 0xfb, 0xff, 0x8d,
        0x1a, 0x35, 0x7a, 0xea, 0xfd, 0x5b, 0x57, 0x94, 0x70, 0x92, 0x44, 0x78,
        0xc1, 0xa2, 0xe8, 0x44, 0x37, 0x37, 0xb7, 0x67, 0xfe, 0x5d, 0x50, 0x50,
        0x10, 0xc9, 0xa6, 0x66, 0x35, 0x77, 0xef, 0xde, 0x65, 0xe3, 0x0a, 0x23,
        0x60, 0xf3, 0xe6, 0xcd, 0xa4, 0xaf, 0x50, 0xd6, 0xd6, 0xd6, 0x08, 0x0c,
        0x0c, 0x7c, 0xe6, 0xdf, 0xb7, 0x6e, 0xdd, 0x9a, 0x05, 0xcb, 0x54, 0x04,
        0xeb, 0x79, 0x83, 0xdd, 0xb0, 0x61, 0x43, 0xf8, 0xfa, 0xfa, 0x92, 0xb6,
        0xe9, 0xeb, 0xaf, 0xbf, 0x16, 0x32, 0x6b, 0x2a, 0xf3, 0x72, 0x64, 0x67,
        0x67, 0x93, 0x1b, 0x4a, 0xf8, 0xfa, 0xfa, 0x3e, 0x77, 0x15, 0xf5, 0xbc,
        0x87, 0x2e, 0x0b, 0x96, 0x4c, 0xdc, 0xbb, 0x77, 0x8f, 0x64, 0xc3, 0xbd,
        0x4d, 0x9b, 0x36, 0xcf, 0xfd, 0xfb, 0xe1, 0xc3, 0x87, 0xa3, 0x45, 0x8b,
        0x16, 0x64, 0xed, 0xaa, 0xaa, 0xaa, 0x22, 0x8f, 0xdb, 0x61, 0x68, 0xd0,
        0xeb, 0xf5, 0x58, 0xb1, 0x62, 0x05, 0x2a, 0x2b, 0x2b, 0xc9, 0xea, 0x68,
        0xd6, 0xac, 0x19, 0x86, 0x0f, 0x1f, 0x5e, 0xa7, 0x7b, 0xb8, 0xb6, 0xab,
        0x7f, 0x8a, 0x00, 0x6d, 0x93, 0x11, 0x2c, 0x8a, 0x55, 0x88, 0x46, 0xa3,
        0xc1, 0x6b, 0xaf, 0xbd, 0xf6, 0xfc, 0x4e, 0x51, 0xab, 0x11, 0x19, 0x19,
        0x09, 0xb5, 0x9a, 0xae, 0x7b, 0x7e, 0xfa, 0xe9, 0x27, 0x36, 0xae, 0x50,
        0x20, 0xc9, 0xc9, 0xc9, 0xa4, 0x86, 0x12, 0x2a, 0x95, 0x0a, 0x11, 0x11,
        0x11, 0x2f, 0x8c, 0x0b, 0x74, 0x71, 0x71, 0x21, 0x89, 0x1d, 0x14, 0x7d,
        0x95, 0x25, 0xb4, 0x60, 0x51, 0x24, 0xc9, 0x6f, 0xda, 0xb4, 0x29, 0x34,
        0x1a, 0xcd, 0x0b, 0xff, 0x9d, 0xab, 0xab, 0x2b, 0x06, 0x0f, 0x1e, 0x4c,
        0xda, 0xbe, 0x8d, 0x1b, 0x37, 0xb2, 0x71, 0x85, 0x82, 0x28, 0x28, 0x28,
        0xc0, 0xa6, 0x4d, 0x9b, 0x48, 0xeb, 0x18, 0x36, 0x6c, 0x18, 0x5a, 0xb5,
        0x6a, 0xf5, 0xc2, 0x7f, 0x67, 0x6e, 0x6e, 0x0e, 0x27, 0x27, 0x27, 0x83,
        0xd7, 0x7f, 0xf3, 0xe6, 0x4d, 0x16, 0xac, 0xda, 0x72, 0xfb, 0xf6, 0x6d,
        0x92, 0xe5, 0xf6, 0xcb, 0x32, 0x79, 0xf2, 0x64, 0x34, 0x68, 0xd0, 0x80,
        0xac, 0x7d, 0x25, 0x25, 0x25, 0x58, 0xbf, 0x7e, 0x3d, 0x2b, 0x81, 0x42,
        0x58, 0xb3, 0x66, 0x0d, 0xe9, 0x2b, 0x93, 0x4e, 0xa7, 0x83, 0x9f, 0x9f,
        0x1f, 0xc9, 0xbd, 0xfc, 0xb2, 0x88, 0x1e, 0x8b, 0x25, 0xb4, 0x60, 0x51,
        0x44, 0x86, 0xd7, 0x64, 0x90, 0xb5, 0x5a, 0x2d, 0xa6, 0x4d, 0x9b, 0x46,
        0xda, 0xc6, 0xd4, 0xd4, 0x54, 0x45, 0xe5, 0x23, 0x32, 0x55, 0xce, 0x9f,
        0x3f, 0x4f, 0x6e, 0xda, 0x10, 0x18, 0x18, 0x08, 0x1b, 0x1b, 0x1b, 0x59,
        0x05, 0x2b, 0x37, 0x37, 0x97, 0x05, 0x4b, 0xa4, 0x15, 0x56, 0xd3, 0xa6,
        0x4d, 0x6b, 0xf4, 0xef, 0x7b, 0xf7, 0xee, 0x4d, 0x12, 0x59, 0xfc, 0x28,
        0xab, 0x56, 0xad, 0x62, 0xe3, 0x0a, 0x81, 0x29, 0x2f, 0x2f, 0xc7, 0xca,
        0x95, 0x2b, 0x49, 0xeb, 0xf0, 0xf0, 0xf0, 0xa8, 0x71, 0x26, 0x86, 0x9a,
        0xde, 0xcb, 0x72, 0xcd, 0x39, 0x16, 0xac, 0x3a, 0xe0, 0xe8, 0xe8, 0x58,
        0xe3, 0xdf, 0x04, 0x05, 0x05, 0xc1, 0xc2, 0xc2, 0x82, 0xac, 0x9d, 0xb9,
        0xb9, 0xb9, 0xd8, 0xbe, 0x7d, 0x3b, 0x2b, 0x83, 0xa0, 0x6c, 0xdd, 0xba,
        0x95, 0xd4, 0x50, 0xc2, 0xdc, 0xdc, 0x1c, 0xc1, 0xc1, 0xc1, 0x35, 0xfe,
        0x1d, 0xc5, 0x51, 0x32, 0x16, 0xac, 0x5a, 0x52, 0x5a, 0x5a, 0x4a, 0x92,
        0x0c, 0xad, 0x36, 0x82, 0xf5, 0xea, 0xab, 0xaf, 0x62, 0xec, 0xd8, 0xb1,
        0xa4, 0xed, 0xdd, 0xb6, 0x6d, 0x9b, 0xf0, 0x16, 0x66, 0xa6, 0x48, 0x4e,
        0x4e, 0x0e, 0x76, 0xec, 0xd8, 0x41, 0x5a, 0x87, 0x8f, 0x8f, 0x0f, 0x9a,
        0x34, 0x69, 0x22, 0xc9, 0xbd, 0xfc, 0x22, 0x0a, 0x0a, 0x0a, 0x84, 0x5e,
        0xed, 0x0b, 0x2b, 0x58, 0xbf, 0xff, 0xfe, 0xbb, 0xc1, 0xcb, 0xb4, 0xb3,
        0xb3, 0x83, 0xb5, 0xb5, 0x75, 0xad, 0x7e, 0x3b, 0x6e, 0xdc, 0xb8, 0x5a,
        0xdd, 0x54, 0x2f, 0x4b, 0x45, 0x45, 0x05, 0x56, 0xad, 0x5a, 0xc5, 0xb1,
        0x59, 0x82, 0xb1, 0x6a, 0xd5, 0x2a, 0x52, 0x43, 0x09, 0x27, 0x27, 0x27,
        0x8c, 0x19, 0x33, 0xa6, 0x56, 0xbf, 0xb5, 0xb1, 0xb1, 0x41, 0xbd, 0x7a,
        0xf5, 0x14, 0x31, 0xf7, 0x8c, 0x5e, 0xb0, 0x28, 0x72, 0xa1, 0x3b, 0x38,
        0x38, 0xd4, 0xfa, 0xb7, 0x1a, 0x8d, 0x06, 0x11, 0x11, 0x11, 0xa4, 0x6d,
        0xce, 0xc8, 0xc8, 0xc0, 0x91, 0x23, 0x47, 0x58, 0x25, 0x04, 0xe1, 0xf0,
        0xe1, 0xc3, 0xf8, 0xf1, 0xc7, 0x1f, 0x49, 0xeb, 0x08, 0x0b, 0x0b, 0x83,
        0xb9, 0xb9, 0xb9, 0xa4, 0x6f, 0x0c, 0x2f, 0xa2, 0xa8, 0xa8, 0x88, 0x05,
        0x4b, 0x04, 0xc1, 0xaa, 0x6b, 0x88, 0x82, 0xbb, 0xbb, 0x3b, 0xfa, 0xf6,
        0xed, 0x4b, 0xda, 0xee, 0xf8, 0xf8, 0x78, 0xe1, 0xa3, 0x8d, 0x4d, 0x81,
        0xfb, 0xf7, 0xef, 0x93, 0x87, 0x9c, 0xf4, 0xeb, 0xd7, 0x0f, 0x6f, 0xbe,
        0xf9, 0x66, 0x9d, 0xca, 0x78, 0xe5, 0x95, 0x57, 0x0c, 0x7e, 0x5d, 0x22,
        0xdb, 0x7e, 0x99, 0x94, 0x60, 0xd9, 0xda, 0xda, 0xd6, 0xb9, 0x8c, 0x80,
        0x80, 0x00, 0xd4, 0xaf, 0x5f, 0x9f, 0xac, 0xdd, 0x05, 0x05, 0x05, 0x6c,
        0x5c, 0x21, 0x00, 0xeb, 0xd7, 0xaf, 0x27, 0x39, 0x16, 0x56, 0x4d, 0xbd,
        0x7a, 0xf5, 0xe0, 0xef, 0xef, 0x5f, 0xe7, 0x72, 0x28, 0x4c, 0x54, 0x44,
        0x76, 0x7a, 0x32, 0xb9, 0x3d, 0x2c, 0x43, 0x94, 0x41, 0x6d, 0x5c, 0x71,
        0xe0, 0xc0, 0x01, 0x36, 0xae, 0x90, 0x91, 0xab, 0x57, 0xaf, 0xe2, 0xc0,
        0x81, 0x03, 0xa4, 0x75, 0x4c, 0x99, 0x32, 0xc5, 0x20, 0xab, 0x23, 0x43,
        0x3c, 0x84, 0x59, 0xb0, 0x0c, 0x40, 0x49, 0x49, 0x89, 0xc1, 0xcb, 0xac,
        0x49, 0x50, 0xde, 0xf3, 0x18, 0x34, 0x68, 0x10, 0xc9, 0xe1, 0xd3, 0x6a,
        0xf4, 0x7a, 0x3d, 0x1b, 0x57, 0xc8, 0x44, 0x65, 0x65, 0x25, 0xb9, 0x6b,
        0x77, 0xcb, 0x96, 0x2d, 0x31, 0x68, 0xd0, 0x20, 0x61, 0x1e, 0xc2, 0x4f,
        0x7b, 0x1d, 0x66, 0xc1, 0xaa, 0x21, 0x14, 0x5f, 0x66, 0x0c, 0xf5, 0x45,
        0x45, 0xa5, 0x52, 0x21, 0x3c, 0x3c, 0x9c, 0xdc, 0xb8, 0xe2, 0xeb, 0xaf,
        0xbf, 0x66, 0x05, 0x91, 0x98, 0xdd, 0xbb, 0x77, 0x93, 0x1b, 0x4a, 0x44,
        0x46, 0x46, 0x42, 0xa5, 0x52, 0x09, 0xf5, 0x10, 0x7e, 0x14, 0x0e, 0x6b,
        0xa8, 0x05, 0x14, 0xab, 0x8b, 0xba, 0x7c, 0x8d, 0x79, 0x12, 0x17, 0x17,
        0x17, 0x8c, 0x1e, 0x3d, 0x9a, 0xb4, 0x0f, 0x12, 0x12, 0x12, 0x84, 0x0f,
        0xe4, 0x33, 0x26, 0xee, 0xdc, 0xb9, 0x83, 0xcf, 0x3f, 0xff, 0x9c, 0xb4,
        0x8e, 0xd1, 0xa3, 0x47, 0xff, 0x69, 0x28, 0x21, 0xda, 0x3d, 0xfd, 0xe8,
        0x2a, 0x93, 0x05, 0x4b, 0x80, 0x15, 0x96, 0xa1, 0x07, 0x77, 0xc2, 0x84,
        0x09, 0x24, 0x9f, 0x95, 0xab, 0x29, 0x2d, 0x2d, 0x45, 0x5c, 0x5c, 0x1c,
        0x2b, 0x89, 0x44, 0xc4, 0xc6, 0xc6, 0x92, 0x1b, 0x4a, 0x8c, 0x1f, 0x3f,
        0x5e, 0xe8, 0x7b, 0x9a, 0x57, 0x58, 0x02, 0xa9, 0xfc, 0xcb, 0xa4, 0x95,
        0xa9, 0x09, 0x96, 0x96, 0x96, 0xe4, 0xc6, 0x15, 0xe9, 0xe9, 0xe9, 0x6c,
        0x5c, 0x21, 0x01, 0xff, 0xfa, 0xd7, 0xbf, 0x90, 0x9e, 0x9e, 0x4e, 0x5a,
        0x47, 0x70, 0x70, 0x70, 0xad, 0x03, 0x97, 0xa5, 0x14, 0x2c, 0xca, 0x40,
        0x59, 0xa3, 0x15, 0x2c, 0x0a, 0x95, 0xa7, 0x18, 0xdc, 0x8e, 0x1d, 0x3b,
        0xa2, 0x5b, 0xb7, 0x6e, 0xe4, 0x4f, 0x7e, 0x36, 0xae, 0xa0, 0xa3, 0xb4,
        0xb4, 0x14, 0xab, 0x57, 0xaf, 0x26, 0xad, 0xa3, 0x5b, 0xb7, 0x6e, 0xe8,
        0xd2, 0xa5, 0x8b, 0x22, 0xee, 0x69, 0x16, 0x2c, 0x23, 0x27, 0x30, 0x30,
        0xf0, 0xdf, 0xac, 0x98, 0x0c, 0xc9, 0xdd, 0xbb, 0x77, 0x91, 0x98, 0x98,
        0xc8, 0x1d, 0x4d, 0x44, 0x42, 0x42, 0x02, 0x69, 0x1e, 0x28, 0x4b, 0x4b,
        0x4b, 0x04, 0x04, 0x04, 0x70, 0x47, 0x1b, 0xb3, 0x60, 0x51, 0x64, 0x47,
        0xa0, 0x7a, 0x72, 0x38, 0x38, 0x38, 0x90, 0x1b, 0x57, 0xec, 0xda, 0xb5,
        0x8b, 0x8d, 0x2b, 0x08, 0xc8, 0xce, 0xce, 0xc6, 0xee, 0xdd, 0xbb, 0x49,
        0xeb, 0xf0, 0xf3, 0xf3, 0x23, 0xdb, 0xeb, 0x54, 0xc2, 0x5e, 0xaf, 0x49,
        0x08, 0x16, 0x45, 0xc8, 0x00, 0x65, 0x5c, 0xd3, 0xc8, 0x91, 0x23, 0xd9,
        0xb8, 0x42, 0x61, 0xe8, 0xf5, 0x7a, 0xac, 0x5c, 0xb9, 0x92, 0xf4, 0xab,
        0x98, 0x8b, 0x8b, 0xcb, 0x0b, 0x0d, 0x25, 0x58, 0xb0, 0x8c, 0x40, 0xb0,
        0x94, 0xf6, 0x6e, 0xae, 0x56, 0xab, 0x11, 0x1e, 0x1e, 0x4e, 0x6e, 0x5c,
        0x41, 0x1d, 0x81, 0x6d, 0x4a, 0xec, 0xdf, 0xbf, 0x9f, 0xcc, 0x59, 0x1c,
        0xf8, 0x7f, 0x43, 0x09, 0x43, 0x7f, 0xec, 0x61, 0xc1, 0x12, 0x10, 0x8a,
        0x41, 0xa6, 0xde, 0x4c, 0x7c, 0xfd, 0xf5, 0xd7, 0x0d, 0x16, 0xc1, 0xfc,
        0x2c, 0xd6, 0xad, 0x5b, 0xc7, 0xc6, 0x15, 0x06, 0xa0, 0xa0, 0xa0, 0x00,
        0x1b, 0x37, 0x6e, 0x24, 0xad, 0x63, 0xc8, 0x90, 0x21, 0x24, 0x86, 0xa7,
        0xd4, 0xf7, 0x34, 0x65, 0xb2, 0x4a, 0x5e, 0x61, 0xd5, 0x00, 0x29, 0xb2,
        0x20, 0xf8, 0xfb, 0xfb, 0x93, 0x1b, 0x57, 0xf0, 0xe1, 0x68, 0xc3, 0x08,
        0x3f, 0xb5, 0xa1, 0xc4, 0xc4, 0x89, 0x13, 0xc9, 0xdb, 0x41, 0x71, 0x8c,
        0x86, 0x57, 0x58, 0xb5, 0x80, 0xe2, 0x50, 0xa7, 0x14, 0x79, 0x7e, 0xb4,
        0x5a, 0x2d, 0xa6, 0x4e, 0x9d, 0x4a, 0x5a, 0xc7, 0xb7, 0xdf, 0x7e, 0x8b,
        0xb3, 0x67, 0xcf, 0xb2, 0xea, 0xd4, 0x92, 0x8c, 0x8c, 0x0c, 0x7c, 0xfb,
        0xed, 0xb7, 0xa4, 0x75, 0x04, 0x04, 0x04, 0x90, 0x24, 0xd7, 0x7b, 0x12,
        0x8a, 0x83, 0xca, 0x14, 0xc7, 0x7d, 0x58, 0xb0, 0x6a, 0x81, 0x54, 0x79,
        0x7e, 0xfa, 0xf4, 0xe9, 0x53, 0xe7, 0x3c, 0x47, 0x2f, 0x62, 0xf5, 0xea,
        0xd5, 0x6c, 0x5c, 0x51, 0x0b, 0x2a, 0x2a, 0x2a, 0xc8, 0x0d, 0x25, 0xdc,
        0xdd, 0xdd, 0x6b, 0x6c, 0x28, 0x21, 0xd2, 0x3d, 0x4d, 0x99, 0x3e, 0xc9,
        0x68, 0x05, 0x8b, 0xe2, 0x14, 0xba, 0x94, 0x99, 0x14, 0xc3, 0xc3, 0xc3,
        0x49, 0x97, 0xd6, 0x52, 0xe4, 0x1a, 0x37, 0x46, 0xbe, 0xfc, 0xf2, 0x4b,
        0x52, 0xb3, 0x50, 0x73, 0x73, 0x73, 0x44, 0x44, 0x44, 0x18, 0xec, 0x70,
        0xb3, 0x1c, 0x2b, 0x2c, 0x16, 0x2c, 0x41, 0x56, 0x58, 0x52, 0xe6, 0xaa,
        0x96, 0xc2, 0xb8, 0x82, 0x7a, 0xf2, 0x19, 0x1b, 0xb7, 0x6e, 0xdd, 0x22,
        0x77, 0x27, 0x7a, 0xf7, 0xdd, 0x77, 0x49, 0x73, 0xff, 0x4b, 0x71, 0x4f,
        0xb3, 0x60, 0x09, 0xd2, 0x69, 0x52, 0xbb, 0xda, 0x52, 0xdf, 0xbc, 0xd5,
        0x7e, 0x79, 0x1c, 0x9b, 0xf5, 0x72, 0x44, 0x47, 0x47, 0x0b, 0x6b, 0x28,
        0x51, 0x5b, 0x28, 0xb2, 0x79, 0x50, 0xbc, 0xdd, 0x18, 0xbd, 0x60, 0x51,
        0xe5, 0xaa, 0x96, 0xf2, 0x4c, 0x9e, 0x54, 0xc6, 0x15, 0xd4, 0x8e, 0xc4,
        0xc6, 0x40, 0x6a, 0x6a, 0x2a, 0xb9, 0xa1, 0x44, 0x68, 0x68, 0xa8, 0xa4,
        0x21, 0x01, 0xf7, 0xef, 0xdf, 0x27, 0xf9, 0xd2, 0xc9, 0x2b, 0xac, 0x5a,
        0x60, 0x69, 0x69, 0x49, 0xa2, 0xf4, 0x52, 0xe7, 0x97, 0x92, 0xc2, 0xb8,
        0x62, 0xed, 0xda, 0xb5, 0x6c, 0x5c, 0xf1, 0x1c, 0x4a, 0x4a, 0x4a, 0xb0,
        0x6e, 0xdd, 0x3a, 0xd2, 0x3a, 0xfa, 0xf6, 0xed, 0x8b, 0xf6, 0xed, 0xdb,
        0x4b, 0xda, 0xae, 0xbc, 0xbc, 0x3c, 0x83, 0x97, 0xa9, 0xd3, 0xe9, 0x38,
        0x0e, 0xab, 0xb6, 0x50, 0x9c, 0xbf, 0x92, 0x23, 0x21, 0xde, 0xd4, 0xa9,
        0x53, 0x49, 0x3f, 0x71, 0x17, 0x14, 0x14, 0x60, 0xf3, 0xe6, 0xcd, 0xac,
        0x4c, 0xcf, 0x60, 0xfd, 0xfa, 0xf5, 0xf8, 0xed, 0xb7, 0xdf, 0xc8, 0xca,
        0xd7, 0x6a, 0xb5, 0x98, 0x32, 0x65, 0x8a, 0xe4, 0xed, 0x12, 0xc5, 0x19,
        0x9d, 0x05, 0x8b, 0xb0, 0xf3, 0xe4, 0x70, 0x57, 0xd6, 0xe9, 0x74, 0x98,
        0x3c, 0x79, 0x32, 0x69, 0x1d, 0xfb, 0xf6, 0xed, 0x23, 0x3d, 0x66, 0xa2,
        0x54, 0xa4, 0x30, 0x94, 0x98, 0x3a, 0x75, 0x2a, 0x1a, 0x36, 0x6c, 0x28,
        0x79, 0xdb, 0x28, 0xee, 0xe5, 0xc6, 0x8d, 0x1b, 0xb3, 0x60, 0x89, 0x24,
        0x58, 0x94, 0xf9, 0xba, 0x9f, 0x87, 0x97, 0x97, 0x17, 0xe9, 0x31, 0x8d,
        0xea, 0x83, 0xbc, 0x6c, 0x5c, 0xf1, 0xff, 0x54, 0x55, 0x55, 0x21, 0x3a,
        0x3a, 0x1a, 0x55, 0x55, 0x55, 0x64, 0x75, 0x18, 0xd2, 0x50, 0xa2, 0xa6,
        0x5c, 0xbf, 0x7e, 0x9d, 0x57, 0x58, 0x22, 0xd1, 0xa8, 0x51, 0x23, 0xa3,
        0x11, 0xac, 0xea, 0x83, 0xb0, 0xd4, 0xc6, 0x15, 0x49, 0x49, 0x49, 0xac,
        0x54, 0xff, 0xc7, 0xee, 0xdd, 0xbb, 0x49, 0x53, 0xf2, 0xa8, 0xd5, 0x6a,
        0x49, 0x63, 0xae, 0x9e, 0xe4, 0x97, 0x5f, 0x7e, 0x31, 0x78, 0x99, 0x75,
        0x71, 0x47, 0x37, 0x79, 0xc1, 0xa2, 0x08, 0x09, 0xf8, 0xf5, 0xd7, 0x5f,
        0x65, 0x5b, 0x85, 0xb8, 0xb8, 0xb8, 0x60, 0xe4, 0xc8, 0x91, 0xa4, 0x75,
        0x6c, 0xd9, 0xb2, 0x85, 0x8d, 0x2b, 0xf0, 0x47, 0x08, 0x4b, 0x42, 0x42,
        0x02, 0x69, 0x1d, 0xa3, 0x46, 0x8d, 0x22, 0x4d, 0x29, 0xf4, 0x3c, 0xca,
        0xcb, 0xcb, 0x49, 0x62, 0xf0, 0xa4, 0x8c, 0x21, 0x33, 0x3a, 0xc1, 0x72,
        0x71, 0x71, 0x31, 0x78, 0x99, 0x95, 0x95, 0x95, 0x24, 0x4f, 0xa6, 0x97,
        0xc5, 0xd7, 0xd7, 0x97, 0xf4, 0x29, 0x56, 0x5a, 0x5a, 0x8a, 0xb5, 0x6b,
        0xd7, 0x9a, 0xbc, 0x60, 0xad, 0x59, 0xb3, 0x86, 0xd4, 0x50, 0xc2, 0xde,
        0xde, 0x1e, 0x13, 0x26, 0x4c, 0x90, 0xad, 0x7d, 0xd9, 0xd9, 0xd9, 0x24,
        0xaf, 0xba, 0xcd, 0x9a, 0x35, 0x63, 0xc1, 0xaa, 0x2d, 0x76, 0x76, 0x76,
        0x24, 0x99, 0x0f, 0xe4, 0x74, 0x55, 0x96, 0xc2, 0xb8, 0xe2, 0xf8, 0xf1,
        0xe3, 0xe4, 0x86, 0x0a, 0x22, 0x73, 0xf2, 0xe4, 0x49, 0x72, 0xe3, 0x0e,
        0x0a, 0x43, 0x09, 0xb9, 0xef, 0x61, 0x07, 0x07, 0x07, 0x49, 0x0e, 0x6c,
        0x1b, 0xad, 0x60, 0x51, 0x29, 0xfe, 0xa5, 0x4b, 0x97, 0x64, 0x6d, 0x53,
        0xa7, 0x4e, 0x9d, 0x48, 0x0c, 0x09, 0x1e, 0xc5, 0x54, 0x8d, 0x2b, 0xa4,
        0x30, 0x94, 0xe8, 0xd2, 0xa5, 0x0b, 0xb9, 0xf1, 0x88, 0x1c, 0x82, 0xf5,
        0xda, 0x6b, 0xaf, 0x09, 0x3f, 0xbe, 0xc2, 0x0b, 0x96, 0x21, 0x4d, 0x27,
        0xab, 0x11, 0xe1, 0xf3, 0x7f, 0x70, 0x70, 0x30, 0xa9, 0x71, 0xc5, 0x9d,
        0x3b, 0x77, 0xf0, 0xc5, 0x17, 0x5f, 0x98, 0x9c, 0x60, 0x25, 0x26, 0x26,
        0x92, 0xee, 0xe1, 0x59, 0x5a, 0x5a, 0x22, 0x28, 0x28, 0x48, 0xf6, 0x76,
        0x52, 0x08, 0x96, 0xe8, 0xaf, 0x83, 0x26, 0xbb, 0xc2, 0xba, 0x73, 0xe7,
        0x8e, 0xe4, 0xe7, 0x0a, 0x9f, 0xb6, 0xfc, 0x7e, 0xef, 0xbd, 0xf7, 0x48,
        0xeb, 0xd8, 0xb9, 0x73, 0x27, 0xc9, 0xa7, 0x6f, 0x51, 0xc9, 0xce, 0xce,
        0xc6, 0xce, 0x9d, 0x3b, 0x49, 0xeb, 0xf0, 0xf5, 0xf5, 0x95, 0xfd, 0xd3,
        0x7f, 0x6e, 0x6e, 0x2e, 0x0a, 0x0a, 0x0a, 0x58, 0xb0, 0x44, 0xa4, 0x4d,
        0x9b, 0x36, 0x24, 0xe5, 0x9e, 0x39, 0x73, 0x46, 0xf6, 0xb6, 0x8d, 0x1c,
        0x39, 0x92, 0xf4, 0x26, 0xa9, 0xaa, 0xaa, 0xc2, 0x8a, 0x15, 0x2b, 0x4c,
        0xe2, 0x70, 0xb4, 0x5e, 0xaf, 0x47, 0x74, 0x74, 0x34, 0xb9, 0xa1, 0xc4,
        0x88, 0x11, 0x23, 0x64, 0x6f, 0x2b, 0xd5, 0xbd, 0x4b, 0x35, 0xd7, 0x4c,
        0x4a, 0xb0, 0x1c, 0x1d, 0x1d, 0x61, 0x6f, 0x6f, 0x6f, 0xf0, 0x72, 0x4f,
        0x9f, 0x3e, 0x2d, 0x7b, 0xdb, 0xcc, 0xcc, 0xcc, 0x10, 0x19, 0x19, 0x49,
        0x1a, 0xc7, 0x63, 0x2a, 0xc6, 0x15, 0x07, 0x0e, 0x1c, 0x20, 0xdd, 0x9b,
        0x54, 0xa9, 0x54, 0x08, 0x0b, 0x0b, 0x23, 0x35, 0x94, 0x78, 0x59, 0x4e,
        0x9e, 0x3c, 0x49, 0xb2, 0xe2, 0x17, 0x3d, 0x06, 0x4b, 0x11, 0x82, 0x05,
        0x80, 0x24, 0x42, 0xfc, 0xcc, 0x99, 0x33, 0x42, 0x44, 0x85, 0x4b, 0x61,
        0x5c, 0xb1, 0x61, 0xc3, 0x06, 0x49, 0x73, 0x81, 0x49, 0x4d, 0x61, 0x61,
        0x21, 0x36, 0x6d, 0xda, 0x44, 0x5a, 0xc7, 0xa0, 0x41, 0x83, 0xe0, 0xe6,
        0xe6, 0x26, 0x7b, 0x5b, 0x2b, 0x2a, 0x2a, 0x70, 0xfe, 0xfc, 0x79, 0x83,
        0x97, 0x2b, 0x42, 0xdb, 0x58, 0xb0, 0x9e, 0x43, 0x49, 0x49, 0x89, 0x30,
        0x67, 0xef, 0xfc, 0xfd, 0xfd, 0xa1, 0xd3, 0xe9, 0xc8, 0xca, 0x2f, 0x2e,
        0x2e, 0xc6, 0xfa, 0xf5, 0xeb, 0x8d, 0x56, 0xb0, 0xd6, 0xae, 0x5d, 0x4b,
        0x92, 0x79, 0xb3, 0x1a, 0x9d, 0x4e, 0x27, 0xcb, 0xe1, 0xe6, 0xa7, 0x71,
        0xe1, 0xc2, 0x05, 0x92, 0xaf, 0xbf, 0xad, 0x5a, 0xb5, 0x62, 0xc1, 0x32,
        0x14, 0x6d, 0xdb, 0xb6, 0x25, 0x29, 0xf7, 0x87, 0x1f, 0x7e, 0x10, 0xa2,
        0x7d, 0x36, 0x36, 0x36, 0xf0, 0xf7, 0xf7, 0x27, 0xad, 0x23, 0x25, 0x25,
        0x85, 0x3c, 0x1f, 0x94, 0x1c, 0x48, 0x61, 0x28, 0x31, 0x6d, 0xda, 0x34,
        0x61, 0xe2, 0x93, 0xa8, 0xee, 0x59, 0x5e, 0x61, 0x19, 0x90, 0x16, 0x2d,
        0x5a, 0x90, 0xa4, 0x4c, 0x3e, 0x76, 0xec, 0x98, 0x30, 0x1b, 0xd2, 0x6f,
        0xbf, 0xfd, 0x36, 0xb9, 0x71, 0xc5, 0xaa, 0x55, 0xab, 0xc8, 0xbd, 0x19,
        0xa5, 0x7e, 0x3d, 0x92, 0xc2, 0x50, 0xa2, 0x77, 0xef, 0xde, 0x42, 0xb4,
        0x57, 0xaf, 0xd7, 0x23, 0x2d, 0x2d, 0xcd, 0xe0, 0xe5, 0xd6, 0xaf, 0x5f,
        0x9f, 0x24, 0x7c, 0xc8, 0x64, 0x05, 0x4b, 0xad, 0x56, 0x93, 0x4c, 0xe6,
        0xbb, 0x77, 0xef, 0xca, 0x1e, 0x44, 0xfa, 0x28, 0x61, 0x61, 0x61, 0x6c,
        0x5c, 0x51, 0x03, 0xb6, 0x6d, 0xdb, 0x46, 0x9a, 0xd3, 0x5e, 0xa3, 0xd1,
        0x20, 0x2c, 0x2c, 0x4c, 0xb6, 0xc3, 0xcd, 0x4f, 0x72, 0xfe, 0xfc, 0x79,
        0x92, 0xbc, 0x5e, 0x1d, 0x3a, 0x74, 0x10, 0xa6, 0x8d, 0x46, 0x21, 0x58,
        0x00, 0xd0, 0xb1, 0x63, 0x47, 0x92, 0x72, 0xbf, 0xfb, 0xee, 0x3b, 0x61,
        0xda, 0x28, 0x45, 0x4e, 0xf0, 0xad, 0x5b, 0xb7, 0x1a, 0x85, 0x71, 0x85,
        0x14, 0x86, 0x12, 0xe3, 0xc6, 0x8d, 0x83, 0xb3, 0xb3, 0xb3, 0x30, 0x6d,
        0x3e, 0x76, 0xec, 0x18, 0x49, 0xb9, 0x1d, 0x3a, 0x74, 0x50, 0xcc, 0xb8,
        0x2b, 0x46, 0xb0, 0x3c, 0x3d, 0x3d, 0xc9, 0x6e, 0x02, 0x91, 0x72, 0x48,
        0xf9, 0xf8, 0xf8, 0xc0, 0xc9, 0xc9, 0x89, 0xac, 0xfc, 0xf2, 0xf2, 0x72,
        0xc4, 0xc6, 0xc6, 0x2a, 0x5e, 0xb0, 0xe2, 0xe2, 0xe2, 0x48, 0x7d, 0x19,
        0x1b, 0x37, 0x6e, 0x4c, 0xee, 0x7a, 0x54, 0xd3, 0x71, 0xa3, 0x10, 0x2c,
        0x95, 0x4a, 0x05, 0x0f, 0x0f, 0x0f, 0x16, 0x2c, 0x43, 0xd3, 0xa0, 0x41,
        0x03, 0x92, 0x54, 0x1e, 0x05, 0x05, 0x05, 0x38, 0x71, 0xe2, 0x84, 0x30,
        0xed, 0xac, 0xf6, 0xb5, 0xa3, 0xe4, 0xcc, 0x99, 0x33, 0x8a, 0x36, 0xae,
        0x38, 0x72, 0xe4, 0x08, 0x49, 0x2c, 0xd2, 0x93, 0xaf, 0xe7, 0x22, 0xe5,
        0x36, 0x3f, 0x7e, 0xfc, 0x38, 0xc9, 0x97, 0x50, 0x57, 0x57, 0x57, 0xa1,
        0x5d, 0x72, 0x14, 0x2b, 0x58, 0x00, 0xc8, 0x0e, 0x0c, 0xef, 0xdf, 0xbf,
        0x5f, 0xa8, 0x76, 0xbe, 0xf1, 0xc6, 0x1b, 0xe4, 0xce, 0xc1, 0x6b, 0xd6,
        0xac, 0xc1, 0xfd, 0xfb, 0xf7, 0x15, 0x27, 0x56, 0x25, 0x25, 0x25, 0x88,
        0x8f, 0x8f, 0x27, 0xad, 0xa3, 0x4f, 0x9f, 0x3e, 0xc2, 0xad, 0x3a, 0xa8,
        0x82, 0x7f, 0xa9, 0x0f, 0xe1, 0x9b, 0xb4, 0x60, 0xbd, 0xf5, 0xd6, 0x5b,
        0x64, 0x2b, 0x0e, 0xd1, 0x92, 0xde, 0x05, 0x06, 0x06, 0x92, 0x1b, 0x57,
        0x6c, 0xd9, 0xb2, 0x45, 0x71, 0x82, 0xb5, 0x71, 0xe3, 0x46, 0x72, 0x43,
        0x09, 0xea, 0x10, 0x93, 0x9a, 0x92, 0x97, 0x97, 0x87, 0x73, 0xe7, 0xce,
        0x29, 0x6a, 0x4e, 0xb1, 0x60, 0x01, 0x70, 0x76, 0x76, 0x26, 0x49, 0xea,
        0xa7, 0xd7, 0xeb, 0x85, 0x3b, 0xbe, 0xa2, 0xd3, 0xe9, 0x30, 0x69, 0xd2,
        0x24, 0xd2, 0x3a, 0xf6, 0xec, 0xd9, 0x83, 0x2b, 0x57, 0xae, 0x28, 0x66,
        0xfc, 0x33, 0x33, 0x33, 0x91, 0x9c, 0x9c, 0x4c, 0x5a, 0xc7, 0xe4, 0xc9,
        0x93, 0x65, 0x31, 0x94, 0x78, 0x1e, 0xfb, 0xf6, 0xed, 0x23, 0x09, 0xbf,
        0x69, 0xd1, 0xa2, 0x05, 0xe9, 0x7e, 0xa9, 0xc9, 0x0b, 0x16, 0xe5, 0x13,
        0x61, 0xef, 0xde, 0xbd, 0xc2, 0xe5, 0x8f, 0x1a, 0x3c, 0x78, 0x30, 0x69,
        0x04, 0x72, 0xb5, 0x71, 0x05, 0xe5, 0x81, 0x61, 0x43, 0x51, 0x7d, 0x90,
        0x9b, 0xda, 0x50, 0x62, 0xc8, 0x90, 0x21, 0xc2, 0xbd, 0x02, 0x53, 0x89,
        0x34, 0xf5, 0xb6, 0x03, 0x0b, 0x16, 0xa1, 0x60, 0x15, 0x17, 0x17, 0xe3,
        0x9b, 0x6f, 0xbe, 0x11, 0xaa, 0xad, 0x2a, 0x95, 0x0a, 0x91, 0x91, 0x91,
        0xa4, 0xc6, 0x15, 0x59, 0x59, 0x59, 0x8a, 0x30, 0xae, 0x48, 0x4a, 0x4a,
        0x32, 0x6a, 0x43, 0x89, 0x67, 0x71, 0xe0, 0xc0, 0x01, 0x94, 0x94, 0x94,
        0x90, 0x94, 0xdd, 0xa3, 0x47, 0x0f, 0x16, 0x2c, 0x6a, 0x9c, 0x9c, 0x9c,
        0xe0, 0xea, 0xea, 0x4a, 0x52, 0xf6, 0xae, 0x5d, 0xbb, 0x48, 0x9f, 0xe0,
        0xb5, 0xc1, 0xc5, 0xc5, 0x05, 0xc3, 0x87, 0x0f, 0x27, 0xad, 0x23, 0x21,
        0x21, 0x01, 0x77, 0xef, 0xde, 0x15, 0x76, 0xcc, 0xf3, 0xf3, 0xf3, 0xc9,
        0x0d, 0x25, 0x46, 0x8c, 0x18, 0x21, 0x9b, 0xa1, 0xc4, 0xb3, 0xa8, 0xac,
        0xac, 0xc4, 0xd7, 0x5f, 0x7f, 0x4d, 0x52, 0x76, 0xab, 0x56, 0xad, 0x84,
        0xf7, 0x20, 0x34, 0x0a, 0xc1, 0x02, 0x80, 0x01, 0x03, 0x06, 0x90, 0x94,
        0x9b, 0x97, 0x97, 0x27, 0x54, 0x20, 0x69, 0x35, 0x13, 0x27, 0x4e, 0x24,
        0x4d, 0xfd, 0xf1, 0xe0, 0xc1, 0x03, 0xac, 0x59, 0xb3, 0x46, 0xd8, 0xf1,
        0x8e, 0x8b, 0x8b, 0x23, 0x5b, 0x65, 0x00, 0x7f, 0x18, 0x4a, 0xf8, 0xfa,
        0xfa, 0x0a, 0xd7, 0xee, 0xd4, 0xd4, 0x54, 0xb2, 0x44, 0x93, 0x03, 0x07,
        0x0e, 0x54, 0xe2, 0xd4, 0x57, 0xa6, 0x60, 0xf5, 0xed, 0xdb, 0x97, 0x2c,
        0xbd, 0xf0, 0xe7, 0x9f, 0x7f, 0x2e, 0xdc, 0x9e, 0x8e, 0xa5, 0xa5, 0x25,
        0x02, 0x02, 0x02, 0x48, 0xeb, 0x48, 0x4b, 0x4b, 0x13, 0x2a, 0x1e, 0xad,
        0x9a, 0x53, 0xa7, 0x4e, 0x91, 0x9c, 0x9f, 0x7b, 0x94, 0xa0, 0xa0, 0x20,
        0x59, 0x0d, 0x25, 0x9e, 0x46, 0x55, 0x55, 0x15, 0xbe, 0xfc, 0xf2, 0x4b,
        0x92, 0xb2, 0xad, 0xac, 0xac, 0x14, 0xf7, 0x75, 0x50, 0xd1, 0x82, 0xa5,
        0xd5, 0x6a, 0xd1, 0xb3, 0x67, 0x4f, 0x92, 0xb2, 0x73, 0x72, 0x72, 0x90,
        0x9a, 0x9a, 0x2a, 0x5c, 0x9b, 0xbb, 0x77, 0xef, 0x8e, 0xce, 0x9d, 0x3b,
        0x93, 0xd6, 0x11, 0x13, 0x13, 0x43, 0x6a, 0x8d, 0x55, 0x53, 0xca, 0xca,
        0xca, 0xc8, 0x0d, 0x25, 0x3c, 0x3d, 0x3d, 0xd1, 0xbd, 0x7b, 0x77, 0xe1,
        0xc6, 0xfb, 0xe0, 0xc1, 0x83, 0xc8, 0xc9, 0xc9, 0x21, 0x29, 0xbb, 0x4f,
        0x9f, 0x3e, 0xd0, 0x6a, 0xb5, 0x2c, 0x58, 0x52, 0x32, 0x78, 0xf0, 0x60,
        0xb2, 0xb2, 0x13, 0x12, 0x12, 0x84, 0xb4, 0x7c, 0x0f, 0x09, 0x09, 0x21,
        0x37, 0xae, 0xd8, 0xba, 0x75, 0xab, 0x30, 0xed, 0x4d, 0x4c, 0x4c, 0x44,
        0x5e, 0x5e, 0x1e, 0xe9, 0xca, 0x35, 0x2c, 0x2c, 0x4c, 0xb8, 0x71, 0xae,
        0xa8, 0xa8, 0xc0, 0xb6, 0x6d, 0xdb, 0xc8, 0xca, 0x57, 0xea, 0xeb, 0xa0,
        0xa2, 0x05, 0xab, 0x55, 0xab, 0x56, 0x64, 0xf9, 0xd0, 0xef, 0xdc, 0xb9,
        0x43, 0x1e, 0xef, 0x53, 0x1b, 0x1c, 0x1c, 0x1c, 0xe0, 0xe3, 0xe3, 0x43,
        0x5a, 0xc7, 0x8e, 0x1d, 0x3b, 0x84, 0x30, 0xae, 0xc8, 0xce, 0xce, 0xc6,
        0x57, 0x5f, 0x7d, 0x45, 0x5a, 0xc7, 0x7b, 0xef, 0xbd, 0x87, 0x46, 0x8d,
        0x1a, 0x09, 0x37, 0xce, 0x7b, 0xf6, 0xec, 0x21, 0x0b, 0x64, 0x6e, 0xd1,
        0xa2, 0x05, 0x5e, 0x7f, 0xfd, 0x75, 0x16, 0x2c, 0x39, 0x18, 0x3d, 0x7a,
        0x34, 0xe9, 0x2a, 0xab, 0xb0, 0xb0, 0x50, 0xb8, 0x36, 0x7b, 0x7b, 0x7b,
        0x93, 0x1b, 0x57, 0xc4, 0xc4, 0xc4, 0xc8, 0x9a, 0x27, 0x4c, 0xaf, 0xd7,
        0x23, 0x26, 0x26, 0x86, 0xdc, 0x50, 0x62, 0xe4, 0xc8, 0x91, 0xc2, 0x8d,
        0x6f, 0x51, 0x51, 0x11, 0xe9, 0x2a, 0xd7, 0xdb, 0xdb, 0x5b, 0xc9, 0x53,
        0x5e, 0xd9, 0x82, 0xd5, 0xbb, 0x77, 0x6f, 0x12, 0x83, 0x0a, 0xe0, 0x8f,
        0xb8, 0x2c, 0xaa, 0x4d, 0xcf, 0xba, 0x60, 0x66, 0x66, 0x46, 0x1e, 0x2f,
        0x74, 0xf1, 0xe2, 0x45, 0x59, 0x63, 0xd2, 0x0e, 0x1e, 0x3c, 0x88, 0x8c,
        0x8c, 0x0c, 0xd2, 0x3a, 0x44, 0x31, 0x94, 0x78, 0x92, 0x4d, 0x9b, 0x36,
        0xa1, 0xa8, 0xa8, 0x88, 0xa4, 0x6c, 0x7b, 0x7b, 0x7b, 0xb2, 0xbd, 0x5f,
        0x16, 0xac, 0x97, 0x40, 0xa3, 0xd1, 0x90, 0xc6, 0x28, 0x25, 0x25, 0x25,
        0x21, 0x3b, 0x3b, 0x5b, 0xc8, 0xd7, 0x61, 0xaa, 0xd0, 0x8e, 0x6a, 0xe2,
        0xe3, 0xe3, 0x65, 0x59, 0x61, 0x4a, 0x61, 0x28, 0x31, 0x70, 0xe0, 0x40,
        0x21, 0x53, 0x02, 0x67, 0x67, 0x67, 0x93, 0x1e, 0x11, 0x1b, 0x35, 0x6a,
        0x94, 0x90, 0x22, 0x6d, 0x32, 0x82, 0x05, 0x00, 0x43, 0x86, 0x0c, 0x21,
        0xfb, 0xe2, 0x21, 0xc2, 0xeb, 0xd1, 0xb3, 0xf0, 0xf7, 0xf7, 0x27, 0x4d,
        0x0b, 0x52, 0x5c, 0x5c, 0x8c, 0x0d, 0x1b, 0x36, 0x48, 0xde, 0xae, 0x75,
        0xeb, 0xd6, 0x91, 0x0a, 0xa5, 0xad, 0xad, 0xad, 0x30, 0x86, 0x12, 0xfe,
        0xfe, 0xfa, 0xb7, 0x00, 0x00, 0x0e, 0x5c, 0x49, 0x44, 0x41, 0x54, 0x4f,
        0xbe, 0x06, 0xaf, 0x5a, 0xb5, 0x8a, 0x2c, 0x70, 0x59, 0xab, 0xd5, 0x2a,
        0x7a, 0xb3, 0xdd, 0x68, 0x04, 0x4b, 0xab, 0xd5, 0xc2, 0xcb, 0xcb, 0x8b,
        0xac, 0xfc, 0x8c, 0x8c, 0x0c, 0x21, 0x7d, 0xfd, 0x6c, 0x6d, 0x6d, 0xc9,
        0xb3, 0x0a, 0x1c, 0x3a, 0x74, 0x48, 0x52, 0xe3, 0x8a, 0x8c, 0x8c, 0x0c,
        0xa4, 0xa4, 0xa4, 0x90, 0xd6, 0x11, 0x10, 0x10, 0x80, 0xfa, 0xf5, 0xeb,
        0x0b, 0x37, 0x9e, 0xc9, 0xc9, 0xc9, 0x24, 0xf6, 0xf3, 0xd5, 0x0c, 0x1e,
        0x3c, 0x18, 0x36, 0x36, 0x36, 0x2c, 0x58, 0x22, 0x30, 0x76, 0xec, 0x58,
        0xd2, 0xc0, 0xbf, 0x75, 0xeb, 0xd6, 0x21, 0x3f, 0x3f, 0x5f, 0xb8, 0x76,
        0xf7, 0xeb, 0xd7, 0x0f, 0xed, 0xda, 0xb5, 0x23, 0xad, 0x43, 0x2a, 0xe3,
        0x8a, 0x8a, 0x8a, 0x0a, 0xac, 0x5a, 0xb5, 0x8a, 0xb4, 0x0e, 0x37, 0x37,
        0x37, 0xbc, 0xfd, 0xf6, 0xdb, 0xc2, 0x8d, 0x63, 0x7e, 0x7e, 0x3e, 0xe9,
        0x6a, 0xd6, 0xca, 0xca, 0x8a, 0x3c, 0xf5, 0x36, 0x0b, 0x56, 0x0d, 0xa8,
        0x5f, 0xbf, 0x3e, 0x86, 0x0d, 0x1b, 0x46, 0x56, 0x7e, 0x49, 0x49, 0x09,
        0x62, 0x62, 0x62, 0x84, 0x6b, 0xb7, 0x4a, 0xa5, 0x42, 0x78, 0x78, 0xb8,
        0x51, 0x18, 0x57, 0xec, 0xd8, 0xb1, 0x03, 0x37, 0x6e, 0xdc, 0x20, 0x2b,
        0x5f, 0xa3, 0xd1, 0x90, 0xbb, 0x6c, 0xd7, 0x96, 0xe8, 0xe8, 0x68, 0xd2,
        0xa3, 0x47, 0xa3, 0x47, 0x8f, 0x56, 0x54, 0x56, 0x51, 0xa3, 0x17, 0xac,
        0xea, 0x55, 0x16, 0x65, 0xf4, 0xee, 0xf1, 0xe3, 0xc7, 0x85, 0xcb, 0xe6,
        0x00, 0xfc, 0x71, 0x18, 0x9c, 0xfa, 0x53, 0xf5, 0x97, 0x5f, 0x7e, 0x89,
        0xdc, 0xdc, 0x5c, 0xb2, 0xf2, 0x6f, 0xdf, 0xbe, 0x4d, 0xfe, 0x45, 0x76,
        0xec, 0xd8, 0xb1, 0x68, 0xda, 0xb4, 0xa9, 0x70, 0xe3, 0xb7, 0x7f, 0xff,
        0x7e, 0xd2, 0x23, 0x51, 0x5a, 0xad, 0x16, 0xa3, 0x46, 0x8d, 0x32, 0x96,
        0x69, 0x6e, 0x3c, 0x82, 0x65, 0x63, 0x63, 0x43, 0x3e, 0x30, 0xab, 0x57,
        0xaf, 0x26, 0x3b, 0x2e, 0x51, 0x17, 0xc6, 0x8f, 0x1f, 0x4f, 0x9a, 0x88,
        0xad, 0xac, 0xac, 0x8c, 0xf4, 0x75, 0x6d, 0xf5, 0xea, 0xd5, 0x28, 0x2d,
        0x2d, 0x25, 0x2b, 0xbf, 0x71, 0xe3, 0xc6, 0x18, 0x37, 0x6e, 0x9c, 0x70,
        0xe3, 0x76, 0xeb, 0xd6, 0x2d, 0xf2, 0x74, 0xcf, 0xef, 0xbc, 0xf3, 0x8e,
        0x30, 0x26, 0xb0, 0x2c, 0x58, 0x4f, 0x59, 0xfa, 0x52, 0x5a, 0xbe, 0x97,
        0x96, 0x96, 0x62, 0xc9, 0x92, 0x25, 0xc2, 0x1d, 0x8e, 0x36, 0x37, 0x37,
        0x47, 0x48, 0x48, 0x08, 0x69, 0x1d, 0x67, 0xce, 0x9c, 0x41, 0x56, 0x56,
        0x96, 0xc1, 0xcb, 0xcd, 0xca, 0xca, 0x22, 0x37, 0x94, 0x08, 0x0a, 0x0a,
        0x12, 0xca, 0x50, 0x02, 0xf8, 0x63, 0xcf, 0x6e, 0xf1, 0xe2, 0xc5, 0xa4,
        0x49, 0x23, 0x75, 0x3a, 0x1d, 0x46, 0x8c, 0x18, 0x61, 0x4c, 0x53, 0xdc,
        0xb8, 0x04, 0x4b, 0xab, 0xd5, 0x92, 0xa7, 0x09, 0xb9, 0x72, 0xe5, 0x0a,
        0x79, 0x9c, 0x50, 0x6d, 0xf0, 0xf0, 0xf0, 0x20, 0x0f, 0x0a, 0x4c, 0x4f,
        0x4f, 0x37, 0x78, 0x99, 0xd4, 0x19, 0x22, 0x7a, 0xf5, 0xea, 0x85, 0x4e,
        0x9d, 0x3a, 0x09, 0x37, 0x5e, 0x1b, 0x36, 0x6c, 0x40, 0x66, 0x66, 0x26,
        0x69, 0x1d, 0x93, 0x27, 0x4f, 0x16, 0x2e, 0x0b, 0x05, 0x0b, 0xd6, 0x13,
        0x0c, 0x1a, 0x34, 0x88, 0x2c, 0xc1, 0x5f, 0x35, 0x3b, 0x76, 0xec, 0x20,
        0x33, 0xb5, 0xac, 0xeb, 0x4a, 0x82, 0x72, 0x1f, 0x8f, 0x62, 0x35, 0x40,
        0xb9, 0xd9, 0xac, 0xd5, 0x6a, 0x31, 0x6d, 0xda, 0x34, 0xe1, 0xc6, 0xe9,
        0xe8, 0xd1, 0xa3, 0xd8, 0xb5, 0x6b, 0x17, 0x69, 0x1d, 0xae, 0xae, 0xae,
        0xe8, 0xd7, 0xaf, 0x9f, 0xb1, 0x4d, 0x6f, 0xe3, 0x13, 0x2c, 0x95, 0x4a,
        0x85, 0xc0, 0xc0, 0x40, 0xf2, 0x7a, 0x96, 0x2e, 0x5d, 0x2a, 0x5c, 0x14,
        0x7c, 0x83, 0x06, 0x0d, 0x30, 0x71, 0xe2, 0x44, 0x30, 0x7f, 0x30, 0x71,
        0xe2, 0x44, 0xe1, 0x0c, 0x25, 0x6e, 0xdc, 0xb8, 0x81, 0x95, 0x2b, 0x57,
        0x92, 0xd7, 0x13, 0x10, 0x10, 0xa0, 0x18, 0xfb, 0x79, 0x93, 0x16, 0x2c,
        0xe0, 0x8f, 0x78, 0x1b, 0xea, 0xd7, 0xa3, 0x87, 0x0f, 0x1f, 0xe2, 0x93,
        0x4f, 0x3e, 0x11, 0xce, 0xdb, 0x6f, 0xd8, 0xb0, 0x61, 0xa4, 0xc6, 0x15,
        0x4a, 0xc1, 0xd5, 0xd5, 0x15, 0x43, 0x87, 0x0e, 0x15, 0xea, 0x9a, 0xee,
        0xdf, 0xbf, 0x8f, 0xf9, 0xf3, 0xe7, 0x93, 0xae, 0x2a, 0x81, 0x3f, 0xf2,
        0x5d, 0xb5, 0x6d, 0xdb, 0xd6, 0x28, 0xc7, 0x55, 0x6d, 0xac, 0x37, 0x6c,
        0x60, 0x60, 0x20, 0x79, 0x92, 0xb2, 0x9b, 0x37, 0x6f, 0x62, 0xde, 0xbc,
        0x79, 0x42, 0xe5, 0xce, 0xaa, 0x8e, 0xcd, 0x52, 0xab, 0x8d, 0x76, 0x68,
        0x5f, 0x7c, 0x53, 0xab, 0xd5, 0xc2, 0xf5, 0x41, 0x45, 0x45, 0x05, 0x16,
        0x2e, 0x5c, 0x48, 0xfe, 0x95, 0x59, 0x44, 0x5f, 0x45, 0x16, 0xac, 0x97,
        0xa0, 0x61, 0xc3, 0x86, 0x98, 0x3c, 0x79, 0x32, 0x79, 0x3d, 0x19, 0x19,
        0x19, 0x88, 0x8e, 0x8e, 0x16, 0xaa, 0xed, 0xcd, 0x9b, 0x37, 0x27, 0x37,
        0xae, 0x10, 0x99, 0x61, 0xc3, 0x86, 0x91, 0xef, 0x63, 0xd6, 0x04, 0xbd,
        0x5e, 0x8f, 0x15, 0x2b, 0x56, 0x48, 0x72, 0xcc, 0x29, 0x30, 0x30, 0x50,
        0xb8, 0xd7, 0x60, 0x16, 0xac, 0x97, 0x64, 0xc8, 0x90, 0x21, 0x92, 0x9c,
        0xca, 0x3f, 0x74, 0xe8, 0x90, 0x70, 0xa9, 0x68, 0x7c, 0x7d, 0x7d, 0xc9,
        0x52, 0xef, 0x88, 0x8c, 0x4e, 0xa7, 0x13, 0xce, 0x50, 0x22, 0x31, 0x31,
        0x91, 0xfc, 0x8c, 0x24, 0x00, 0xb4, 0x6b, 0xd7, 0x0e, 0xfd, 0xfb, 0xf7,
        0x37, 0xee, 0xd5, 0xb3, 0x31, 0x37, 0x4e, 0xa5, 0x52, 0x61, 0xc6, 0x8c,
        0x19, 0xa4, 0x47, 0x57, 0xaa, 0xd9, 0xbc, 0x79, 0x33, 0xf6, 0xee, 0xdd,
        0x2b, 0x4c, 0xdb, 0xb5, 0x5a, 0xad, 0x24, 0x1f, 0x1f, 0x44, 0x23, 0x24,
        0x24, 0x44, 0xa8, 0x43, 0xbe, 0x7b, 0xf6, 0xec, 0x41, 0x62, 0x62, 0x22,
        0x79, 0x3d, 0x16, 0x16, 0x16, 0x42, 0xfa, 0x2a, 0xb2, 0x60, 0xd5, 0x10,
        0x27, 0x27, 0x27, 0xc9, 0x9e, 0xb8, 0x31, 0x31, 0x31, 0x38, 0x7c, 0xf8,
        0xb0, 0x30, 0x6d, 0xef, 0xd1, 0xa3, 0x07, 0xb9, 0x71, 0x85, 0x48, 0x78,
        0x7a, 0x7a, 0x0a, 0x65, 0x0e, 0x9a, 0x92, 0x92, 0x82, 0xd8, 0xd8, 0x58,
        0x49, 0xea, 0xf2, 0xf3, 0xf3, 0xc3, 0xab, 0xaf, 0xbe, 0x6a, 0xf4, 0x63,
        0x6c, 0x12, 0x3b, 0xb3, 0x63, 0xc6, 0x8c, 0x21, 0xcf, 0x6a, 0x50, 0xbd,
        0x57, 0xb1, 0x74, 0xe9, 0x52, 0x1c, 0x3d, 0x7a, 0x54, 0xa8, 0x15, 0x87,
        0xa5, 0xa5, 0xa5, 0xd1, 0x8f, 0xb1, 0x85, 0x85, 0x85, 0x50, 0x86, 0x12,
        0xdf, 0x7f, 0xff, 0x3d, 0x96, 0x2d, 0x5b, 0x26, 0x49, 0x2e, 0x35, 0x77,
        0x77, 0x77, 0xd2, 0x74, 0xe1, 0x2c, 0x58, 0x32, 0xbc, 0x1a, 0xce, 0x9c,
        0x39, 0x53, 0x92, 0x33, 0x55, 0x55, 0x55, 0x55, 0x58, 0xb2, 0x64, 0x09,
        0xbe, 0xff, 0xfe, 0x7b, 0x21, 0xda, 0x2e, 0x85, 0x71, 0x85, 0x08, 0x8c,
        0x1f, 0x3f, 0x5e, 0x18, 0x43, 0x89, 0xb4, 0xb4, 0x34, 0x2c, 0x5e, 0xbc,
        0x58, 0x12, 0x17, 0x71, 0x5b, 0x5b, 0x5b, 0x7c, 0xf0, 0xc1, 0x07, 0x46,
        0xff, 0x2a, 0x68, 0x52, 0x82, 0x55, 0x3d, 0x71, 0x23, 0x23, 0x23, 0x25,
        0xa9, 0xab, 0xa2, 0xa2, 0x02, 0x8b, 0x16, 0x2d, 0x12, 0x26, 0xbb, 0xc3,
        0x98, 0x31, 0x63, 0x48, 0x8d, 0x2b, 0xe4, 0xc6, 0xd9, 0xd9, 0x59, 0x18,
        0x73, 0x85, 0xd4, 0xd4, 0x54, 0x7c, 0xfa, 0xe9, 0xa7, 0x92, 0x85, 0xba,
        0x84, 0x86, 0x86, 0x1a, 0xf5, 0x57, 0x41, 0x93, 0x15, 0x2c, 0xe0, 0x8f,
        0x3d, 0x1d, 0xa9, 0x8e, 0x2b, 0x54, 0x55, 0x55, 0x61, 0xd9, 0xb2, 0x65,
        0x42, 0xd8, 0x85, 0x99, 0x99, 0x99, 0x91, 0x1f, 0x8e, 0x96, 0x93, 0xd0,
        0xd0, 0x50, 0x21, 0x72, 0x95, 0x27, 0x25, 0x25, 0xe1, 0xb3, 0xcf, 0x3e,
        0x93, 0x64, 0x65, 0x05, 0x00, 0x5e, 0x5e, 0x5e, 0xe8, 0xd5, 0xab, 0x97,
        0x29, 0x4d, 0x61, 0x98, 0x5c, 0x74, 0x61, 0x58, 0x58, 0x98, 0x64, 0xab,
        0x0d, 0xbd, 0x5e, 0x8f, 0xe8, 0xe8, 0x68, 0x24, 0x26, 0x26, 0xca, 0x9e,
        0x17, 0xbe, 0x6d, 0xdb, 0xb6, 0x46, 0xf9, 0xc9, 0x7b, 0xe0, 0xc0, 0x81,
        0x78, 0xe3, 0x8d, 0x37, 0x64, 0xbd, 0x06, 0xbd, 0x5e, 0x8f, 0x84, 0x84,
        0x04, 0xc9, 0x36, 0xd8, 0x81, 0x3f, 0x22, 0xf9, 0x83, 0x82, 0x82, 0x4c,
        0x6d, 0xfa, 0x42, 0xa5, 0x17, 0xd1, 0x61, 0x81, 0x98, 0xdb, 0xb7, 0x6f,
        0x23, 0x3c, 0x3c, 0x9c, 0xcc, 0x4e, 0xe9, 0x69, 0xf4, 0xeb, 0xd7, 0x0f,
        0x91, 0x91, 0x91, 0xb2, 0xae, 0x04, 0x8a, 0x8a, 0x8a, 0x30, 0x6d, 0xda,
        0x34, 0x21, 0xfd, 0x16, 0x6b, 0x83, 0xad, 0xad, 0x2d, 0xe2, 0xe3, 0xe3,
        0x65, 0xcd, 0xa6, 0x59, 0x51, 0x51, 0x81, 0x65, 0xcb, 0x96, 0xe1, 0xdb,
        0x6f, 0xbf, 0x95, 0xac, 0xce, 0x7a, 0xf5, 0xea, 0x21, 0x3a, 0x3a, 0x5a,
        0x48, 0x13, 0x58, 0x5e, 0x61, 0x11, 0xe0, 0xe8, 0xe8, 0x88, 0xbf, 0xfe,
        0xf5, 0xaf, 0x92, 0x6e, 0x54, 0xa6, 0xa4, 0xa4, 0x60, 0xce, 0x9c, 0x39,
        0xb2, 0x9e, 0x3d, 0x14, 0xd5, 0x31, 0xa6, 0xb6, 0x4c, 0x9b, 0x36, 0x4d,
        0x56, 0xb1, 0x2a, 0x2e, 0x2e, 0xc6, 0xec, 0xd9, 0xb3, 0x25, 0x15, 0x2b,
        0xb5, 0x5a, 0x8d, 0x0f, 0x3f, 0xfc, 0xd0, 0x24, 0xc5, 0xca, 0x64, 0x05,
        0x0b, 0x00, 0x3a, 0x75, 0xea, 0x84, 0xf1, 0xe3, 0xc7, 0x4b, 0x5a, 0xe7,
        0xb9, 0x73, 0xe7, 0x10, 0x19, 0x19, 0x29, 0x6b, 0x96, 0x87, 0xfe, 0xfd,
        0xfb, 0xc3, 0xdd, 0xdd, 0x5d, 0xf1, 0xe3, 0xe7, 0xee, 0xee, 0x2e, 0x6b,
        0xfa, 0x94, 0xeb, 0xd7, 0xaf, 0x23, 0x22, 0x22, 0x82, 0xdc, 0xf0, 0xf5,
        0x49, 0xde, 0x7b, 0xef, 0x3d, 0x78, 0x78, 0x78, 0x98, 0xea, 0xb4, 0x35,
        0x5d, 0xc1, 0x02, 0x80, 0x09, 0x13, 0x26, 0xa0, 0x4f, 0x9f, 0x3e, 0x92,
        0xd6, 0x99, 0x93, 0x93, 0x83, 0xc8, 0xc8, 0x48, 0xd9, 0xbe, 0x20, 0xaa,
        0x54, 0x2a, 0x44, 0x46, 0x46, 0x4a, 0x12, 0xfd, 0x4f, 0x85, 0x46, 0xa3,
        0x41, 0x58, 0x58, 0x98, 0x6c, 0x9f, 0xf2, 0x53, 0x53, 0x53, 0x31, 0x73,
        0xe6, 0x4c, 0xd2, 0x3c, 0xf7, 0x4f, 0xa3, 0x67, 0xcf, 0x9e, 0x78, 0xf7,
        0xdd, 0x77, 0x4d, 0x79, 0xca, 0x9a, 0xb6, 0x60, 0xa9, 0x54, 0x2a, 0x4c,
        0x9f, 0x3e, 0x1d, 0x6d, 0xda, 0xb4, 0x91, 0xb4, 0xde, 0xb2, 0xb2, 0x32,
        0x2c, 0x5d, 0xba, 0x14, 0x71, 0x71, 0x71, 0xb2, 0x64, 0x7a, 0x90, 0xc2,
        0xb8, 0x82, 0x12, 0x6f, 0x6f, 0x6f, 0x38, 0x3b, 0x3b, 0x4b, 0x5e, 0x6f,
        0x79, 0x79, 0x39, 0x56, 0xaf, 0x5e, 0x8d, 0xcf, 0x3e, 0xfb, 0x8c, 0x34,
        0x07, 0xfd, 0xb3, 0x56, 0x94, 0xff, 0xf9, 0x9f, 0xff, 0x69, 0x32, 0xf1,
        0x56, 0xcf, 0x9c, 0xb3, 0xa6, 0xb8, 0xe9, 0xfe, 0x24, 0x85, 0x85, 0x85,
        0x98, 0x35, 0x6b, 0x96, 0x2c, 0x06, 0x13, 0x2e, 0x2e, 0x2e, 0xf8, 0xe0,
        0x83, 0x0f, 0xe0, 0xe2, 0xe2, 0x22, 0xb9, 0x68, 0x06, 0x05, 0x05, 0x49,
        0xbe, 0x4a, 0xa8, 0x2b, 0x0e, 0x0e, 0x0e, 0x58, 0xb3, 0x66, 0x0d, 0xac,
        0xac, 0xac, 0x24, 0xad, 0xf7, 0xd7, 0x5f, 0x7f, 0xc5, 0xa7, 0x9f, 0x7e,
        0x4a, 0x92, 0xd7, 0xfe, 0x45, 0x34, 0x6e, 0xdc, 0x18, 0xcb, 0x96, 0x2d,
        0x33, 0x1a, 0xab, 0x2e, 0x5e, 0x61, 0xd5, 0x11, 0x3b, 0x3b, 0x3b, 0x2c,
        0x5c, 0xb8, 0x50, 0x96, 0x1b, 0x22, 0x3b, 0x3b, 0x1b, 0x11, 0x11, 0x11,
        0xd8, 0xb5, 0x6b, 0x97, 0xa4, 0xa1, 0x0f, 0x16, 0x16, 0x16, 0x08, 0x0d,
        0x0d, 0x55, 0xdc, 0x58, 0x85, 0x84, 0x84, 0x48, 0x2a, 0x56, 0x7a, 0xbd,
        0x1e, 0xfb, 0xf7, 0xef, 0x47, 0x78, 0x78, 0xb8, 0x2c, 0x62, 0x55, 0xbf,
        0x7e, 0x7d, 0x2c, 0x58, 0xb0, 0x80, 0xc5, 0x8a, 0x05, 0xeb, 0x71, 0x1a,
        0x35, 0x6a, 0x84, 0x79, 0xf3, 0xe6, 0x91, 0x27, 0xfd, 0x7b, 0xd6, 0xab,
        0xc6, 0xda, 0xb5, 0x6b, 0x11, 0x15, 0x15, 0x85, 0xdb, 0xb7, 0x6f, 0x4b,
        0x56, 0xaf, 0xa7, 0xa7, 0x27, 0x79, 0x66, 0x56, 0x43, 0xd2, 0xb3, 0x67,
        0x4f, 0x49, 0x0f, 0x73, 0xdf, 0xbe, 0x7d, 0x1b, 0x73, 0xe6, 0xcc, 0xc1,
        0xca, 0x95, 0x2b, 0x25, 0x7f, 0x05, 0x04, 0xfe, 0xc8, 0xb8, 0xb1, 0x70,
        0xe1, 0x42, 0x52, 0x0b, 0x37, 0x7e, 0x25, 0x54, 0x38, 0x97, 0x2f, 0x5f,
        0xc6, 0xec, 0xd9, 0xb3, 0xf1, 0xf0, 0xe1, 0x43, 0x59, 0xea, 0xb7, 0xb4,
        0xb4, 0xc4, 0x84, 0x09, 0x13, 0xe0, 0xed, 0xed, 0x2d, 0x49, 0xc6, 0xcc,
        0xdf, 0x7e, 0xfb, 0x0d, 0xd3, 0xa6, 0x4d, 0x23, 0x4f, 0xdb, 0x6b, 0x88,
        0xc9, 0xbb, 0x76, 0xed, 0x5a, 0x49, 0x8e, 0xa1, 0xe8, 0xf5, 0x7a, 0x1c,
        0x38, 0x70, 0x00, 0x6b, 0xd7, 0xae, 0x95, 0xf5, 0x3e, 0x58, 0xb0, 0x60,
        0x81, 0x51, 0x7c, 0xd1, 0x35, 0x24, 0x66, 0x73, 0xe7, 0xce, 0x9d, 0xcb,
        0xdd, 0xf0, 0xff, 0xfc, 0xc7, 0x7f, 0xfc, 0x07, 0x5a, 0xb6, 0x6c, 0x89,
        0x63, 0xc7, 0x8e, 0x49, 0x76, 0xc4, 0xe2, 0x51, 0x2a, 0x2b, 0x2b, 0x71,
        0xf6, 0xec, 0x59, 0x9c, 0x39, 0x73, 0x06, 0x2d, 0x5a, 0xb4, 0x20, 0x9f,
        0xa0, 0xd6, 0xd6, 0xd6, 0xb0, 0xb2, 0xb2, 0xc2, 0xa9, 0x53, 0xa7, 0x84,
        0x1e, 0x97, 0xa9, 0x53, 0xa7, 0xa2, 0x7d, 0xfb, 0xf6, 0xe4, 0xf5, 0x5c,
        0xbd, 0x7a, 0x15, 0x0b, 0x16, 0x2c, 0x40, 0x72, 0x72, 0xb2, 0x6c, 0xa9,
        0xaf, 0xcd, 0xcd, 0xcd, 0xf1, 0xf1, 0xc7, 0x1f, 0xe3, 0xcd, 0x37, 0xdf,
        0xe4, 0x09, 0xc9, 0x2b, 0xac, 0x97, 0xe3, 0xf8, 0xf1, 0xe3, 0x58, 0xb4,
        0x68, 0x91, 0xac, 0xa6, 0xa9, 0x2a, 0x95, 0x0a, 0x03, 0x06, 0x0c, 0x80,
        0x9f, 0x9f, 0x1f, 0x1a, 0x34, 0x68, 0x40, 0xba, 0xa2, 0x98, 0x3e, 0x7d,
        0x3a, 0x7e, 0xfa, 0xe9, 0x27, 0x21, 0xc7, 0xc2, 0xd5, 0xd5, 0x15, 0xcb,
        0x97, 0x2f, 0x27, 0x5d, 0x71, 0xe6, 0xe7, 0xe7, 0x63, 0xd3, 0xa6, 0x4d,
        0x38, 0x7c, 0xf8, 0xb0, 0xac, 0xc7, 0xa8, 0xcc, 0xcc, 0xcc, 0x10, 0x15,
        0x15, 0x65, 0x52, 0x79, 0xcc, 0x58, 0xb0, 0x0c, 0x44, 0x7a, 0x7a, 0x3a,
        0x16, 0x2d, 0x5a, 0x84, 0xf2, 0xf2, 0x72, 0x59, 0xaf, 0xc3, 0xda, 0xda,
        0x1a, 0x3e, 0x3e, 0x3e, 0x18, 0x31, 0x62, 0x04, 0x99, 0x83, 0x71, 0x66,
        0x66, 0x26, 0xa6, 0x4f, 0x9f, 0x2e, 0xcb, 0xaa, 0xf2, 0x45, 0xa2, 0xbd,
        0x74, 0xe9, 0x52, 0x32, 0x27, 0xa0, 0xd2, 0xd2, 0x52, 0xec, 0xdc, 0xb9,
        0x13, 0xdb, 0xb7, 0x6f, 0x97, 0xed, 0xf5, 0xef, 0xd1, 0x95, 0xd5, 0xec,
        0xd9, 0xb3, 0xd1, 0xa5, 0x4b, 0x17, 0x9e, 0x7c, 0x2c, 0x58, 0xb5, 0xe3,
        0xfc, 0xf9, 0xf3, 0x98, 0x3b, 0x77, 0x2e, 0xa9, 0xa5, 0xf8, 0xcb, 0x62,
        0x67, 0x67, 0x07, 0x6f, 0x6f, 0x6f, 0x32, 0xe1, 0x8a, 0x8d, 0x8d, 0x45,
        0x52, 0x52, 0x92, 0x50, 0xfd, 0x3f, 0x7c, 0xf8, 0x70, 0x04, 0x07, 0x07,
        0x1b, 0xbc, 0xdc, 0x8a, 0x8a, 0x0a, 0x7c, 0xf3, 0xcd, 0x37, 0x48, 0x48,
        0x48, 0x40, 0x41, 0x41, 0x81, 0xec, 0xed, 0xb4, 0xb4, 0xb4, 0x44, 0x54,
        0x54, 0x14, 0x3c, 0x3d, 0x3d, 0x79, 0xd2, 0xb1, 0x60, 0xd5, 0x8d, 0x0b,
        0x17, 0x2e, 0xe0, 0xe3, 0x8f, 0x3f, 0x16, 0x66, 0x63, 0xda, 0xde, 0xde,
        0x1e, 0x3e, 0x3e, 0x3e, 0xe8, 0xdf, 0xbf, 0xbf, 0x41, 0x23, 0xd6, 0x4b,
        0x4a, 0x4a, 0x10, 0x10, 0x10, 0x80, 0xfc, 0xfc, 0x7c, 0x21, 0xda, 0xa9,
        0xd3, 0xe9, 0x10, 0x1f, 0x1f, 0x6f, 0xd0, 0x1c, 0xed, 0x65, 0x65, 0x65,
        0xf8, 0xe6, 0x9b, 0x6f, 0xf0, 0xe5, 0x97, 0x5f, 0xe2, 0xee, 0xdd, 0xbb,
        0x42, 0xb4, 0x53, 0xab, 0xd5, 0x62, 0xfe, 0xfc, 0xf9, 0x92, 0x18, 0xa6,
        0xb0, 0x60, 0x99, 0x08, 0x99, 0x99, 0x99, 0x88, 0x8a, 0x8a, 0x12, 0x2a,
        0xd3, 0x81, 0x4e, 0xa7, 0xc3, 0xb0, 0x61, 0xc3, 0x30, 0x78, 0xf0, 0x60,
        0x83, 0xc5, 0xe9, 0x1c, 0x3d, 0x7a, 0x14, 0x8b, 0x17, 0x2f, 0x16, 0xa2,
        0x7d, 0xb3, 0x67, 0xcf, 0x36, 0x58, 0xd8, 0xc5, 0xbd, 0x7b, 0xf7, 0xb0,
        0x77, 0xef, 0x5e, 0x24, 0x25, 0x25, 0x09, 0x37, 0x86, 0xf3, 0xe6, 0xcd,
        0x13, 0xca, 0x96, 0x8c, 0x05, 0xcb, 0x48, 0xc8, 0xcd, 0xcd, 0x45, 0x54,
        0x54, 0x94, 0x2c, 0x11, 0xf1, 0x2f, 0x7a, 0x9d, 0xe8, 0xdf, 0xbf, 0x3f,
        0x86, 0x0c, 0x19, 0x62, 0x90, 0x88, 0xf9, 0x8f, 0x3e, 0xfa, 0x08, 0x27,
        0x4f, 0x9e, 0x94, 0xb5, 0x4d, 0x1e, 0x1e, 0x1e, 0xf8, 0xe4, 0x93, 0x4f,
        0xea, 0x5c, 0xce, 0xf5, 0xeb, 0xd7, 0x91, 0x9c, 0x9c, 0x8c, 0x94, 0x94,
        0x14, 0x59, 0x62, 0xa9, 0x9e, 0x87, 0xb3, 0xb3, 0x33, 0xe6, 0xcf, 0x9f,
        0x0f, 0x47, 0x47, 0x47, 0x9e, 0x5c, 0x2c, 0x58, 0x34, 0x14, 0x17, 0x17,
        0x63, 0xfe, 0xfc, 0xf9, 0x92, 0x9f, 0xd2, 0x7f, 0x59, 0x5c, 0x5d, 0x5d,
        0xff, 0xcc, 0x44, 0x59, 0xdb, 0x20, 0xd8, 0xdb, 0xb7, 0x6f, 0x23, 0x30,
        0x30, 0x50, 0xb6, 0x09, 0x6e, 0x61, 0x61, 0x81, 0xb8, 0xb8, 0x38, 0x34,
        0x6e, 0xdc, 0xb8, 0xd6, 0xaf, 0xb6, 0xc7, 0x8f, 0x1f, 0xc7, 0xe1, 0xc3,
        0x87, 0x25, 0x31, 0x2f, 0xad, 0x0d, 0xed, 0xda, 0xb5, 0x43, 0x54, 0x54,
        0x94, 0x50, 0x96, 0x64, 0x2c, 0x58, 0x46, 0x4a, 0x79, 0x79, 0x39, 0x96,
        0x2d, 0x5b, 0x86, 0xd4, 0xd4, 0x54, 0x61, 0xaf, 0xd1, 0xda, 0xda, 0x1a,
        0x5d, 0xbb, 0x76, 0xc5, 0x5b, 0x6f, 0xbd, 0x05, 0x0f, 0x0f, 0x8f, 0x1a,
        0xef, 0x75, 0x6d, 0xdd, 0xba, 0x15, 0x5b, 0xb6, 0x6c, 0x91, 0xe5, 0xda,
        0xfd, 0xfc, 0xfc, 0x6a, 0x6c, 0x9c, 0x51, 0x5e, 0x5e, 0x8e, 0x93, 0x27,
        0x4f, 0x22, 0x2d, 0x2d, 0x0d, 0x3f, 0xfc, 0xf0, 0x83, 0xec, 0x5f, 0xfc,
        0x9e, 0x47, 0xdf, 0xbe, 0x7d, 0x31, 0x63, 0xc6, 0x0c, 0x21, 0xd2, 0x3a,
        0xb3, 0x60, 0x99, 0x08, 0x7a, 0xbd, 0x1e, 0xdb, 0xb7, 0x6f, 0xc7, 0x96,
        0x2d, 0x5b, 0x84, 0x0b, 0x05, 0x78, 0x12, 0xad, 0x56, 0x8b, 0x6e, 0xdd,
        0xba, 0xa1, 0x6b, 0xd7, 0xae, 0x78, 0xf3, 0xcd, 0x37, 0x5f, 0x6a, 0xe5,
        0x55, 0x51, 0x51, 0x81, 0xd0, 0xd0, 0x50, 0xdc, 0xb8, 0x71, 0x43, 0xd2,
        0x6b, 0x75, 0x72, 0x72, 0x42, 0x6c, 0x6c, 0xec, 0x4b, 0x09, 0x6c, 0x49,
        0x49, 0x09, 0xce, 0x9e, 0x3d, 0x8b, 0xe3, 0xc7, 0x8f, 0x23, 0x3d, 0x3d,
        0x5d, 0xf8, 0x68, 0x7d, 0xb5, 0x5a, 0x8d, 0x29, 0x53, 0xa6, 0x60, 0xf4,
        0xe8, 0xd1, 0x26, 0x9f, 0x75, 0x81, 0x05, 0x4b, 0x26, 0x4e, 0x9f, 0x3e,
        0x8d, 0xcf, 0x3e, 0xfb, 0x0c, 0xf7, 0xee, 0xdd, 0x53, 0xc4, 0xf5, 0x9a,
        0x99, 0x99, 0xc1, 0xcd, 0xcd, 0x0d, 0x9e, 0x9e, 0x9e, 0xf0, 0xf4, 0xf4,
        0x44, 0xb3, 0x66, 0xcd, 0x9e, 0x19, 0x90, 0x99, 0x91, 0x91, 0x81, 0xf7,
        0xdf, 0x7f, 0x5f, 0xd2, 0xeb, 0x5b, 0xbc, 0x78, 0xf1, 0x33, 0x3d, 0x24,
        0xab, 0xaa, 0xaa, 0x70, 0xed, 0xda, 0x35, 0xfc, 0xf8, 0xe3, 0x8f, 0x38,
        0x79, 0xf2, 0x24, 0x2e, 0x5d, 0xba, 0x24, 0x6b, 0x60, 0x6f, 0x4d, 0xb0,
        0xb3, 0xb3, 0xc3, 0xec, 0xd9, 0xb3, 0x65, 0xcf, 0x3f, 0xcf, 0x82, 0xc5,
        0xe0, 0xce, 0x9d, 0x3b, 0x58, 0xb8, 0x70, 0x21, 0x32, 0x33, 0x33, 0x15,
        0x77, 0xed, 0xd6, 0xd6, 0xd6, 0x68, 0xdd, 0xba, 0xf5, 0x9f, 0xff, 0xfd,
        0xe5, 0x2f, 0x7f, 0x79, 0xec, 0x8b, 0xe3, 0x3f, 0xff, 0xf9, 0x4f, 0xa4,
        0xa4, 0xa4, 0x48, 0x72, 0x2d, 0x03, 0x06, 0x0c, 0xc0, 0x8c, 0x19, 0x33,
        0xfe, 0xfc, 0xf3, 0xbd, 0x7b, 0xf7, 0xf0, 0xf3, 0xcf, 0x3f, 0xe3, 0xd2,
        0xa5, 0x4b, 0xb8, 0x7c, 0xf9, 0x32, 0x2e, 0x5f, 0xbe, 0x2c, 0x44, 0x3c,
        0x5c, 0x4d, 0x69, 0xd5, 0xaa, 0x15, 0xfe, 0xfe, 0xf7, 0xbf, 0xc3, 0xde,
        0xde, 0x9e, 0x27, 0x0b, 0x0b, 0x96, 0x18, 0x94, 0x95, 0x95, 0x21, 0x3e,
        0x3e, 0x1e, 0x7b, 0xf7, 0xee, 0x55, 0x7c, 0x5b, 0x1a, 0x34, 0x68, 0x00,
        0x17, 0x17, 0x17, 0x34, 0x6b, 0xd6, 0x0c, 0xf6, 0xf6, 0xf6, 0x48, 0x48,
        0x48, 0x20, 0x7f, 0xdd, 0xb2, 0xb6, 0xb6, 0xc6, 0xc4, 0x89, 0x13, 0xf1,
        0x3f, 0xff, 0xf3, 0x3f, 0xc8, 0xca, 0xca, 0x42, 0x56, 0x56, 0x96, 0x10,
        0x01, 0x9d, 0x75, 0x65, 0xe4, 0xc8, 0x91, 0xf0, 0xf7, 0xf7, 0xe7, 0xfd,
        0x2a, 0x16, 0x2c, 0x31, 0x49, 0x4f, 0x4f, 0xc7, 0xf2, 0xe5, 0xcb, 0x8d,
        0xc6, 0x99, 0x86, 0xa9, 0x1d, 0x3a, 0x9d, 0x0e, 0x33, 0x67, 0xce, 0x44,
        0x87, 0x0e, 0x1d, 0xb8, 0x33, 0x58, 0xb0, 0xc4, 0xe6, 0xf7, 0xdf, 0x7f,
        0xc7, 0xf2, 0xe5, 0xcb, 0x71, 0xe2, 0xc4, 0x09, 0xee, 0x0c, 0x13, 0xc4,
        0xc3, 0xc3, 0x03, 0x33, 0x67, 0xce, 0x34, 0x29, 0x47, 0x66, 0x16, 0x2c,
        0x85, 0xa3, 0xd7, 0xeb, 0xb1, 0x67, 0xcf, 0x1e, 0x6c, 0xdc, 0xb8, 0x51,
        0xe8, 0x4f, 0xec, 0x8c, 0x61, 0x5f, 0x6b, 0xfd, 0xfd, 0xfd, 0x31, 0x78,
        0xf0, 0x60, 0xfe, 0x0a, 0xc8, 0x82, 0xa5, 0x4c, 0xf2, 0xf3, 0xf3, 0xb1,
        0x6a, 0xd5, 0x2a, 0xa4, 0xa7, 0xa7, 0x73, 0x67, 0x18, 0x31, 0x1d, 0x3b,
        0x76, 0x44, 0x58, 0x58, 0x18, 0x1c, 0x1c, 0x1c, 0xb8, 0x33, 0x58, 0xb0,
        0x94, 0xcf, 0xb1, 0x63, 0xc7, 0xb0, 0x7a, 0xf5, 0x6a, 0xde, 0xdb, 0x32,
        0x32, 0x74, 0x3a, 0x1d, 0xa6, 0x4c, 0x99, 0x22, 0xab, 0x47, 0x22, 0x0b,
        0x16, 0x43, 0xc2, 0xbd, 0x7b, 0xf7, 0xb0, 0x61, 0xc3, 0x06, 0x1c, 0x3a,
        0x74, 0x08, 0xdc, 0xed, 0xca, 0x46, 0xad, 0x56, 0x63, 0xe0, 0xc0, 0x81,
        0x98, 0x3c, 0x79, 0x32, 0x6c, 0x6d, 0x6d, 0xb9, 0x43, 0x58, 0xb0, 0x8c,
        0x97, 0x6b, 0xd7, 0xae, 0x61, 0xcd, 0x9a, 0x35, 0xc2, 0x9e, 0x47, 0x64,
        0x9e, 0x8f, 0xbb, 0xbb, 0x3b, 0x82, 0x82, 0x82, 0xd0, 0xbc, 0x79, 0x73,
        0xee, 0x0c, 0x16, 0x2c, 0xd3, 0xe1, 0xc4, 0x89, 0x13, 0x88, 0x8b, 0x8b,
        0x43, 0x5e, 0x5e, 0x1e, 0x77, 0x86, 0x02, 0xb0, 0xb7, 0xb7, 0xc7, 0xc4,
        0x89, 0x13, 0xf9, 0xf5, 0x8f, 0x05, 0xcb, 0x74, 0x29, 0x2b, 0x2b, 0xc3,
        0xbe, 0x7d, 0xfb, 0xf0, 0xdf, 0xff, 0xfd, 0xdf, 0x46, 0x11, 0x28, 0x69,
        0x8c, 0xe8, 0x74, 0x3a, 0xbc, 0xfb, 0xee, 0xbb, 0xf0, 0xf2, 0xf2, 0x32,
        0x68, 0xc2, 0x44, 0x86, 0x05, 0x4b, 0xb1, 0x94, 0x96, 0x96, 0x22, 0x39,
        0x39, 0x99, 0x85, 0x4b, 0x20, 0xea, 0xd7, 0xaf, 0x8f, 0x31, 0x63, 0xc6,
        0x60, 0xf8, 0xf0, 0xe1, 0xb0, 0xb4, 0xb4, 0xe4, 0x0e, 0x61, 0xc1, 0x62,
        0x9e, 0xa4, 0xa4, 0xa4, 0x04, 0x49, 0x49, 0x49, 0xd8, 0xbd, 0x7b, 0x37,
        0x7f, 0x51, 0x94, 0x71, 0x45, 0x35, 0x6a, 0xd4, 0x28, 0x0c, 0x1d, 0x3a,
        0x14, 0xd6, 0xd6, 0xd6, 0xdc, 0x21, 0x2c, 0x58, 0xcc, 0xcb, 0xbc, 0x2a,
        0x1e, 0x3e, 0x7c, 0x18, 0x3b, 0x77, 0xee, 0xc4, 0xcd, 0x9b, 0x37, 0xb9,
        0x43, 0x24, 0xc0, 0xd9, 0xd9, 0x19, 0xde, 0xde, 0xde, 0xe8, 0xd3, 0xa7,
        0x0f, 0xbf, 0xfa, 0xb1, 0x60, 0x31, 0xb5, 0x41, 0xaf, 0xd7, 0xe3, 0xc4,
        0x89, 0x13, 0xd8, 0xb5, 0x6b, 0x17, 0xce, 0x9f, 0x3f, 0xcf, 0x1d, 0x42,
        0x40, 0xbb, 0x76, 0xed, 0x30, 0x6a, 0xd4, 0x28, 0x74, 0xea, 0xd4, 0x89,
        0x23, 0xd4, 0x59, 0xb0, 0x18, 0x43, 0x91, 0x93, 0x93, 0x83, 0x03, 0x07,
        0x0e, 0xe0, 0xf0, 0xe1, 0xc3, 0xbc, 0xcf, 0x65, 0x80, 0xd7, 0xbe, 0x9e,
        0x3d, 0x7b, 0xc2, 0xcb, 0xcb, 0xcb, 0x20, 0x79, 0xf0, 0x19, 0x16, 0x2c,
        0xe6, 0x19, 0x54, 0x54, 0x54, 0x20, 0x3d, 0x3d, 0x1d, 0x07, 0x0e, 0x1c,
        0xc0, 0xd9, 0xb3, 0x67, 0x85, 0xcf, 0x78, 0x2a, 0x0a, 0x66, 0x66, 0x66,
        0xf0, 0xf0, 0xf0, 0xc0, 0xc0, 0x81, 0x03, 0xd1, 0xb9, 0x73, 0x67, 0x4e,
        0xf9, 0xc2, 0x82, 0xc5, 0x48, 0x4d, 0x71, 0x71, 0x31, 0xd2, 0xd3, 0xd3,
        0x91, 0x96, 0x96, 0x86, 0x53, 0xa7, 0x4e, 0x29, 0x26, 0x03, 0xa7, 0x64,
        0x37, 0xb8, 0x4a, 0x85, 0xd6, 0xad, 0x5b, 0xa3, 0x47, 0x8f, 0x1e, 0xe8,
        0xdd, 0xbb, 0x37, 0x74, 0x3a, 0x1d, 0x77, 0x0a, 0x0b, 0x16, 0x23, 0x02,
        0x05, 0x05, 0x05, 0x48, 0x4b, 0x4b, 0xc3, 0x89, 0x13, 0x27, 0x90, 0x91,
        0x91, 0x81, 0xb2, 0xb2, 0x32, 0x93, 0xec, 0x07, 0x0b, 0x0b, 0x0b, 0xb8,
        0xbb, 0xbb, 0xa3, 0x6b, 0xd7, 0xae, 0xe8, 0xde, 0xbd, 0x3b, 0x5e, 0x79,
        0xe5, 0x15, 0xbe, 0x39, 0x58, 0xb0, 0x18, 0x91, 0x29, 0x2b, 0x2b, 0xc3,
        0x85, 0x0b, 0x17, 0x70, 0xf6, 0xec, 0x59, 0x9c, 0x3b, 0x77, 0x4e, 0x91,
        0xe9, 0x9b, 0x6b, 0x42, 0xa3, 0x46, 0x8d, 0xd0, 0xbe, 0x7d, 0x7b, 0xb4,
        0x6f, 0xdf, 0x1e, 0x1d, 0x3a, 0x74, 0xe0, 0x70, 0x04, 0x16, 0x2c, 0x46,
        0xc9, 0xe4, 0xe7, 0xe7, 0xe3, 0xe7, 0x9f, 0x7f, 0xc6, 0x85, 0x0b, 0x17,
        0x70, 0xe9, 0xd2, 0x25, 0xfc, 0xf4, 0xd3, 0x4f, 0xa8, 0xa8, 0xa8, 0x50,
        0x64, 0x5b, 0xd4, 0x6a, 0x35, 0x9a, 0x34, 0x69, 0x02, 0x37, 0x37, 0x37,
        0xb4, 0x69, 0xd3, 0x06, 0x6d, 0xdb, 0xb6, 0x45, 0xa3, 0x46, 0x8d, 0x78,
        0x90, 0x59, 0xb0, 0x18, 0x63, 0xa5, 0xa4, 0xa4, 0x04, 0x57, 0xaf, 0x5e,
        0xc5, 0xf5, 0xeb, 0xd7, 0x91, 0x9d, 0x9d, 0x8d, 0xac, 0xac, 0x2c, 0xdc,
        0xb8, 0x71, 0x03, 0xe5, 0xe5, 0xe5, 0x42, 0x5d, 0xa7, 0xb9, 0xb9, 0x39,
        0x9c, 0x9d, 0x9d, 0xd1, 0xac, 0x59, 0x33, 0xb8, 0xb8, 0xb8, 0xa0, 0x79,
        0xf3, 0xe6, 0x78, 0xfd, 0xf5, 0xd7, 0x6b, 0x6d, 0x12, 0xcb, 0xb0, 0x60,
        0x31, 0x46, 0x42, 0x65, 0x65, 0x25, 0x6e, 0xdd, 0xba, 0x85, 0x5f, 0x7f,
        0xfd, 0x15, 0x77, 0xee, 0xdc, 0x41, 0x6e, 0x6e, 0x2e, 0x6e, 0xdf, 0xbe,
        0xfd, 0xe7, 0x7f, 0x54, 0x8e, 0x35, 0x5a, 0xad, 0x16, 0x8e, 0x8e, 0x8e,
        0x70, 0x70, 0x70, 0x80, 0xa3, 0xa3, 0x23, 0x1a, 0x37, 0x6e, 0x0c, 0x07,
        0x07, 0x07, 0x34, 0x6d, 0xda, 0x14, 0xaf, 0xbe, 0xfa, 0x2a, 0xcc, 0xcc,
        0xcc, 0x78, 0x70, 0x18, 0x16, 0x2c, 0xa6, 0x66, 0x94, 0x95, 0x95, 0xa1,
        0xa8, 0xa8, 0x08, 0x85, 0x85, 0x85, 0x28, 0x2a, 0x2a, 0xc2, 0xbd, 0x7b,
        0xf7, 0x50, 0x5c, 0x5c, 0x8c, 0xca, 0xca, 0xca, 0x3f, 0xc5, 0xec, 0xe1,
        0xc3, 0x87, 0x7f, 0x6e, 0xf6, 0x5b, 0x58, 0x58, 0xc0, 0xca, 0xca, 0x0a,
        0x00, 0x60, 0x65, 0x65, 0x05, 0x8d, 0x46, 0x03, 0xad, 0x56, 0x8b, 0x57,
        0x5e, 0x79, 0x05, 0xb6, 0xb6, 0xb6, 0xb0, 0xb3, 0xb3, 0x83, 0xad, 0xad,
        0x2d, 0x2c, 0x2c, 0x2c, 0xb8, 0x73, 0x19, 0x16, 0x2c, 0x86, 0x61, 0x8c,
        0x0b, 0x35, 0x77, 0x01, 0xc3, 0x30, 0x2c, 0x58, 0x0c, 0xc3, 0x30, 0x2c,
        0x58, 0x0c, 0xc3, 0xb0, 0x60, 0x31, 0x0c, 0xc3, 0xb0, 0x60, 0x31, 0x0c,
        0xc3, 0xb0, 0x60, 0x31, 0x0c, 0xc3, 0x82, 0xc5, 0x30, 0x0c, 0xc3, 0x82,
        0xc5, 0x30, 0x0c, 0xc3, 0x82, 0xc5, 0x30, 0x8c, 0x69, 0xf0, 0xbf, 0xb9,
        0x31, 0x60, 0x9c, 0x9d, 0x12, 0xa5, 0xba, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

void showImage(const std::string &winName, const Mat &image, const int delayMs = 0) {
    // make window
    cv::namedWindow(winName, cv::WINDOW_NORMAL);
    // show image
    cv::imshow(winName, image);
    if (delayMs == 0) {
        // pause until spacebar pressed
        int key;
        do {
            key = cv::waitKey(0);
            cout << "Key pressed: " << key << endl;
            if (key == 0x71) { // q
                exit(0);
            }
        } while (key != 0x20); // space
    } else {
        // only wait for the specified amount of time
        int key = cv::waitKey(delayMs);
        if (key == 0x71) { // q
            exit(0);
        }
    }
}

auto getDist(const cv::Point3f &a, const cv::Point3f &b) {
    return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2) + pow(a.z - b.z, 2));
};

// use_sfm
int use_sfm(int argc, char **argv) {
//    cv::VideoCapture video("filtered.mp4"); // file
    const std::string filename("rotated.mp4");
    cv::VideoCapture video(filename); // file
    Mat cameraMatrix = (cv::Mat_<double>(3, 3) << 1832.391560091573, 0, 990.5806201708402,
            0, 1908.748246162413, 583.7365111902692,
            0, 0, 1);
    Mat distCoeffs = (cv::Mat_<double>(1, 5) <<
                                             0.4844366250990991, -5.235386621259898, -0.004643144194354134,
            0.0008540941726086641, 20.9172586642425);
    cv::Size patternSize(7, 7);
    vector<cv::Point3f> chessObjectPoints, cubeObjectPoints;
    vector<cv::KeyPoint> prevKeypoints;
    Mat image, prevDescriptors, prevImg, homo, warped, tvec, rvec; // , cameraMatrix(3, 3, CV_64F);
    // cv::setIdentity(cameraMatrix);
    auto orb = cv::ORB::create();
    auto matcher = cv::BFMatcher::create();
    const float squareSize = 1;
    const float offsetX = squareSize, offsetY = squareSize;
    // initalize cubeObjectPoints with a cube
    for (int i = 2; i <= 4; i += 2) {
        for (int j = 2; j <= 4; j += 2) {
            for (int k = 0; k <= 2; k += 2) {
                cubeObjectPoints.emplace_back(i * squareSize, j * squareSize, k * squareSize);
            }
        }
    }
    while (video.read(image)) {
        vector<cv::KeyPoint> keyPoints;
        Mat chessImagePoints;
        Mat grayscale;
        Mat descriptors;
        // convert to grayscale for better detection
        cv::cvtColor(image, grayscale, cv::COLOR_BGR2GRAY);
        // find features with ORB
        orb->detectAndCompute(image, cv::noArray(), keyPoints, descriptors);
        if (!prevImg.empty()) {
            vector<vector<cv::DMatch>> matches;
            Mat homo1, homo2;
            // get feature correspondences between frames
//            matcher->match(prevDescriptors, descriptors, matches, cv::noArray());
            matcher->knnMatch(prevDescriptors, descriptors, matches, 2);
            vector<cv::Point2f> prevCorners;
            vector<cv::Point2f> corners;
            for (const auto &match: matches) {
                if (match[0].distance > match[1].distance * 0.6) {
                    prevCorners.push_back(prevKeypoints[match[0].trainIdx].pt);
                    corners.push_back(keyPoints[match[0].queryIdx].pt);
                }
            }
            // find fundamental matrix
            Mat fundamentalMat = cv::findFundamentalMat(prevCorners, corners);
            // find the projection matricies
            // code shamelessly stolen from https://github.com/opencv/opencv_contrib/blob/master/modules/sfm/src/fundamental.cpp#L65
            Mat projA, projB;
            {
                using namespace cv;
                Mat_<double> proj1(3, 4, fundamentalMat.depth());
                Mat_<double> proj2(3, 4, fundamentalMat.depth());
                proj1 << 1, 0, 0, 0,
                        0, 1, 0, 0,
                        0, 0, 1, 0;
                Vec<double, 3> e2;
                SVD::solveZ(fundamentalMat.t(), e2);
                Mat_<double> skew(3, 3);
                skew << 0, -e2(2), e2(1),
                        e2(2), 0, -e2(0),
                        -e2(1), e2(0), 0;
                Mat_<float> P2cols = skew * fundamentalMat;
                for (char j = 0; j < 3; ++j) {
                    for (char i = 0; i < 3; ++i) {
                        proj2(j, i) = P2cols(j, i);
                    }
                    proj2(j, 3) = e2(j);
                }
                proj1.convertTo(projA, CV_32F);
                proj2.convertTo(projB, CV_32F);
            }
            // use the projection matricies to triangulate the found points
            Mat points4D, points3D;
            cv::triangulatePoints(projA, projB, prevCorners, corners, points4D);
            // find Euclidian coordinates of points?
            cv::convertPointsFromHomogeneous(points4D, points3D);
            // reproject points on to image

            // find the camera posistion
//            cv::stereoRectifyUncalibrated(prevCorners, corners, fundamentalMat, cv::Size(image.rows, image.cols), homo1, homo2);
        }
        descriptors.copyTo(prevDescriptors);
        prevKeypoints = keyPoints;
        image.copyTo(prevImg);
        showImage("Original", image, 16);
    }
    return 0;
}

// THIS ONE WORKS!!!!!!
int use_solvePnP(int argc, char **argv) {
    std::string filename("filtered.mp4");
    if (argc > 1) {
        filename = argv[1];
    }
// Camera Matrix:
// [1832.391560091573, 0, 990.5806201708402;
// 0, 1908.748246162413, 583.7365111902692;
// 0, 0, 1]
// Distortion Coefficents:
// [0.4844366250990991, -5.235386621259898, -0.004643144194354134, 0.0008540941726086641, 20.9172586642425]
    cv::VideoWriter writer;
    cv::VideoCapture video(filename); // file
//    cv::VideoCapture video(0); // webcam
    cv::Size patternSize(7, 7);
    int imageIdx = 0;
    vector<cv::Point3f> chessObjectPoints, cubeObjectPoints;
    Mat distorted, undistorted, homo, warped, tvec, rvec;
    Mat cameraMatrix = (cv::Mat_<double>(3, 3) << 1832.391560091573, 0, 990.5806201708402,
            0, 1908.748246162413, 583.7365111902692,
            0, 0, 1);
    Mat distCoeffs = (cv::Mat_<double>(1, 5) <<
                                             0.4844366250990991, -5.235386621259898, -0.004643144194354134,
            0.0008540941726086641, 20.9172586642425);
    cout << cameraMatrix << endl << distCoeffs << endl;
    const float squareSize = 1;
    const float offsetX = squareSize, offsetY = squareSize;
    Mat tjlogo = cv::imdecode(Mat(tjlogo_png), cv::ImreadModes::IMREAD_COLOR);
    // initalize chessObjectPoints with the corners of a chess board in the 3D space
    for (int i = 0; i < patternSize.width; ++i) {
        for (int j = 0; j < patternSize.height; ++j) {
            chessObjectPoints.emplace_back(j * squareSize + offsetY, i * squareSize + offsetX, 0);
        }
    }
    // initalize cubeObjectPoints with a cube
    for (int i = 3; i <= 5; i += 2) {
        for (int j = 3; j <= 5; j += 2) {
            for (int k = 0; k >= -2; k -= 2) {
                cubeObjectPoints.emplace_back(i * squareSize, j * squareSize, k * squareSize);
            }
        }
    }
    vector<vector<cv::Point3f>> axes = {{cv::Point3f(0, 0, 0), cv::Point3f(1, 0, 0)},
                                        {cv::Point3f(0, 0, 0), cv::Point3f(0, 1, 0)},
                                        {cv::Point3f(0, 0, 0), cv::Point3f(0, 0, 1)}};
    vector<cv::Point3f> axesSingular = {cv::Point3f(squareSize, 0, 0), cv::Point3f(0, squareSize, 0),
                                        cv::Point3f(0, 0, squareSize),
                                        cv::Point3f(0, 0, 0)};
    while (video.read(distorted)) {
        distorted.copyTo(undistorted);
        vector<cv::Point2f> chessImagePoints;
        Mat grayscale;
        // convert to grayscale for better detection
        cv::cvtColor(undistorted, grayscale, cv::COLOR_BGR2GRAY);
        // detect chessboard corners
        bool success = cv::findChessboardCorners(grayscale, patternSize, chessImagePoints,
                                                 cv::CALIB_CB_ADAPTIVE_THRESH | cv::CALIB_CB_NORMALIZE_IMAGE |
                                                 cv::CALIB_CB_FAST_CHECK);
        if (success) {
            vector<cv::Point2f> cubeImagePoints;
            cv::cornerSubPix(grayscale, chessImagePoints, cv::Size(11, 11), cv::Size(-1, -1), cv::TermCriteria());
            // find rotation + translation vectors
            cv::solvePnP(chessObjectPoints, chessImagePoints, cameraMatrix, distCoeffs, rvec, tvec);
            // draw axes
            // attempt 3
//            cv::projectPoints(chessObjectPoints, rvec, tvec, cameraMatrix, distCoeffs, chessImagePoints);
//            for (const auto &point : chessImagePoints) {
//                cv::circle(undistorted, point, 10, cv::Scalar(0, 127, 255), 5);
//            }
//          // attempt 2
            cv::projectPoints(axesSingular, rvec, tvec, cameraMatrix, distCoeffs, cubeImagePoints);
            for (int i = 0; i < 3; i++) {
                cv::line(undistorted, cubeImagePoints[3], cubeImagePoints[i],
                         cv::Scalar(axesSingular[i].x * 255, axesSingular[i].y * 255, axesSingular[i].z * 255));
            }
//          // attempt 1
//            for (auto pair : axes) {
//                cv::projectPoints(pair, rvec, tvec, cameraMatrix, cv::noArray(), cubeImagePoints);
//                cv::line(undistorted, cv::Point(cubeImagePoints[0].x, cubeImagePoints[0].y),
//                         cv::Point(cubeImagePoints[1].x, cubeImagePoints[1].y),
//                         cv::Scalar(pair[1].x * 255, pair[1].y * 255, pair[1].z * 255));
//            }
            // attempt 0
            // use those vectors to project the cube onto the undistorted plane
            cv::projectPoints(cubeObjectPoints, rvec, tvec, cameraMatrix, cv::noArray(), cubeImagePoints);
            // now, draw lines to render the cube
            for (int i = 0; i < cubeObjectPoints.size(); ++i) {
                for (int j = 0; j < cubeImagePoints.size(); ++j) {
                    // only draw lines for outside of box
                    if (getDist(cubeObjectPoints[i], cubeObjectPoints[j]) <= 2.01) {
                        cv::line(undistorted, cv::Point(static_cast<int>(cubeImagePoints[i].x),
                                                        static_cast<int>(cubeImagePoints[i].y)),
                                 cv::Point(static_cast<int>(cubeImagePoints[j].x),
                                           static_cast<int>(cubeImagePoints[j].y)), cv::Scalar(0, 255,
                                                                                               (cubeObjectPoints[i].z !=
                                                                                                0 ||
                                                                                                cubeObjectPoints[j].z !=
                                                                                                0) ? 255 : 0), 3);
                    }
                }
            }
            // experimental: use homography to render cube faces
            // sort the object points by their distance from the camera
            vector<std::pair<cv::Point3f, int>> sortedPoints;
            for (int i = 0; i < cubeObjectPoints.size(); ++i) {
                sortedPoints.emplace_back(cubeObjectPoints[i], i);
            }
            cout << "tvec: " << tvec << endl;
            std::sort(sortedPoints.begin(), sortedPoints.end(),
                      [&tvec](const std::pair<cv::Point3f, int> &a, const std::pair<cv::Point3f, int> &b) -> auto {
                          return getDist(b.first, cv::Point3f(tvec)) - getDist(a.first, cv::Point3f(tvec));
                      });
            // points on the same X,Y,Z plane as the closest point become the rendered faces
            vector<std::pair<cv::Point3f, int>> xPoints, yPoints, zPoints;
            for (const auto &point : sortedPoints) {
                if (point.first.x == sortedPoints[0].first.x) {
                    xPoints.emplace_back(point);
                }
                if (point.first.y == sortedPoints[0].first.y) {
                    yPoints.emplace_back(point);
                }
                if (point.first.z == sortedPoints[0].first.z) {
                    zPoints.emplace_back(point);
                }
            }
            // prepare arrays with the image and non-image points that correspond to the found points
            vector<cv::Point3f> xObj, yObj, zObj;
            vector<cv::Point2f> xImg, yImg, zImg;
            for (int i = 0; i < 4; i++) {
                xObj.push_back(xPoints[i].first);
                yObj.push_back(yPoints[i].first);
                zObj.push_back(zPoints[i].first);
                xImg.push_back(cubeImagePoints[xPoints[i].second]);
                yImg.push_back(cubeImagePoints[yPoints[i].second]);
                zImg.push_back(cubeImagePoints[zPoints[i].second]);
            }
            // use the established point correspondences to compute homography matrices
            Mat xHomo = cv::findHomography(xObj, xImg);
            Mat yHomo = cv::findHomography(yObj, yImg);
            Mat zHomo = cv::findHomography(zObj, zImg);
            // use the homography matricies to transform the TJ Logo on to the cube
            Mat xWarped, yWarped, zWarped;
            cv::warpPerspective(tjlogo, xWarped, xHomo, cv::Size(undistorted.cols, undistorted.rows));
            cv::warpPerspective(tjlogo, yWarped, yHomo, cv::Size(undistorted.cols, undistorted.rows));
            cv::warpPerspective(tjlogo, zWarped, zHomo, cv::Size(undistorted.cols, undistorted.rows));
            // apply the warped images to the real one
            // its broken, so i guess don't do it?
//            xWarped.copyTo(undistorted, xWarped);
//            yWarped.copyTo(undistorted, yWarped);
//            zWarped.copyTo(undistorted, zWarped);
        }
        showImage("Original", undistorted, 16);
    }
    return 0;
}

int determine_camera_calibration(int argc, char **argv) {
    cv::VideoCapture video("filtered.mp4");
    Mat frame;
    vector<vector<cv::Point2f>> imagePoints;
    vector<vector<cv::Point3f>> objectPoints;
    std::set<int> badFrameIndicies;
    std::unordered_map<int, int> goodFrameIndicies;
    cout << "Collecting Frames..." << endl;
    for (int i = 0, j = 0; video.read(frame); i++) {
        vector<cv::Point2f> corners;
        bool success = cv::findChessboardCorners(frame, cv::Size(7, 7), corners);
        if (success) {
            imagePoints.push_back(corners);
            goodFrameIndicies[i] = j;
            j++;
        } else {
            badFrameIndicies.insert(i);
        }
        cout << "Frame: " << i << "/" << video.get(CV_CAP_PROP_FRAME_COUNT) << "\n";
    }
    cout << endl;
    for (int i = 0; i < imagePoints.size(); i++) {
        vector<cv::Point3f> tmpVec;
        for (int x = 0; x < 7; ++x) {
            for (int y = 0; y < 7; ++y) {
                tmpVec.emplace_back(x, y, 0);
            }
        }
        objectPoints.push_back(tmpVec);
    }
    Mat cameraMatrix, distCoeffs, stdDevIntrinsics, stdDevExtrinsics, perViewErrors;
    vector<Mat> rvecs, tvecs;
    cout << objectPoints.size() << " " << objectPoints[0].size() << endl;
    cout << imagePoints.size() << endl;
    cout << "Calibrating Camera..." << endl;
//    cv::calibrateCamera(objectPoints, imagePoints, cv::Size(static_cast<int>(video.get(CV_CAP_PROP_FRAME_WIDTH)),
//                                                            static_cast<int>(video.get(CV_CAP_PROP_FRAME_HEIGHT))),
//                        cameraMatrix, distCoeffs, rvecs, tvecs,
//                        stdDevIntrinsics, stdDevExtrinsics, perViewErrors);
    cout << "Camera Matrix: " << endl;
    cout << cameraMatrix << endl;
    cout << "Distortion Coefficents: " << endl;
    cout << distCoeffs << endl;
    video.release();
    video.open("filtered.mp4");
    for (int i = 0; video.read(frame); i++) {
        cout << "Frame: " << i << "/" << video.get(CV_CAP_PROP_FRAME_COUNT) << "\r";
        if (badFrameIndicies.find(i) != badFrameIndicies.end()) { // i is not in badFrameIndicies
            Mat undistorted;
            cv::undistort(frame, undistorted, cameraMatrix, distCoeffs);
            showImage("undistorted", undistorted, 16);
        } else {
            showImage("undistorted", frame, 16);
        }
    }
    cout << endl;
    // Output of the full version of this program (took 27 minutes on my best server)
// Camera Matrix:
// [1832.391560091573, 0, 990.5806201708402;
// 0, 1908.748246162413, 583.7365111902692;
// 0, 0, 1]
// Distortion Coefficents:
// [0.4844366250990991, -5.235386621259898, -0.004643144194354134, 0.0008540941726086641, 20.9172586642425]
    return 0;
}

int overlay_video_with_homography(int argc, char **argv) {
    const std::string templateFilename = "spiral.mp4";
    cv::VideoCapture video(0); // webcam
//    cv::VideoCapture video("chessboard.mp4");
//    cv::VideoCapture video("boardframes.avi");
    cv::VideoCapture templateVideo(templateFilename); // video file
//    const Mat templateImg = cv::imread("image.png");
    bool workedInPast = false;
    cv::Size patternSize(7, 7);
    int imageIdx = 0;
    vector<cv::Point2f> objectPoints;
    Mat image, homo, warped, tmp;
    templateVideo.read(tmp);
    const float squareSizeX = (float) tmp.size[0] / (patternSize.width + 1), squareSizeY =
            (float) tmp.size[1] / (patternSize.height + 1);
    const float offsetX = squareSizeX, offsetY = squareSizeY;
    // initalize objectPoints with the corners of a chess board in the 3D space
    for (int i = 0; i < patternSize.width; ++i) {
        for (int j = 0; j < patternSize.height; ++j) {
            objectPoints.emplace_back(j * squareSizeY + offsetY, i * squareSizeX + offsetX);
        }
    }
    while (video.read(image)) {
        vector<cv::Point2f> imageBoardPoints;
        Mat grayscale;
        cv::cvtColor(image, grayscale, cv::COLOR_BGR2GRAY);
//        cv::Canny(grayscale, grayscale, 30, 60);
//        showImage("Canny", grayscale, 1);
        bool success = cv::findChessboardCorners(image, patternSize, imageBoardPoints,
                                                 cv::CALIB_CB_ADAPTIVE_THRESH | cv::CALIB_CB_NORMALIZE_IMAGE |
                                                 cv::CALIB_CB_FAST_CHECK);
        if (success) {
            homo = cv::findHomography(objectPoints, imageBoardPoints);
//            workedInPast = true;
//        }
//        if (workedInPast) {
            Mat tempWarped, templateImg;
//            Mat tempWarped;
            bool gotFrame = templateVideo.read(templateImg);
            if (!gotFrame) {
                templateVideo.open(templateFilename);
                templateVideo.read(templateImg);
            }
            cv::warpPerspective(templateImg, tempWarped, homo, cv::Size(image.size[1], image.size[0]));
            image.copyTo(warped);
            tempWarped.copyTo(warped, tempWarped);
            warped.copyTo(image);
        }
        cv::drawChessboardCorners(image, patternSize, imageBoardPoints, success);
        showImage("Original", image, 1);
//        cv::imwrite("bunny_" + std::to_string(imageIdx++) + ".png", image);
    }
    return 0;
}

// rotate_entire_image
int main(int argc, char **argv) {
    const float squareSize = 25;
    const int offsetX = 600, offsetY = 200;
    // cv::VideoCapture video("chessboard.mp4");
    // cv::VideoCapture video(0);
    cv::VideoWriter writer;
    bool workedInPast = false;
    cv::VideoCapture video("boardframes.avi");
    cv::Size patternSize(7, 7);
    vector<cv::Point2f> objectPoints;
    Mat image, homo, warped;
    // initalize objectPoints with the corners of a chess board in the 3D space
    for (int i = 0; i < patternSize.width; ++i) {
        for (int j = 0; j < patternSize.height; ++j) {
            objectPoints.emplace_back(i * squareSize + offsetX, j * squareSize + offsetY);
//            objectPoints.emplace_back(j, i);
        }
    }
    while (video.read(image)) {
        if (!writer.isOpened()) {
            auto prop = video.get(cv::CAP_PROP_FOURCC);
            cout << "Opening..\n";
            writer.open("out.mp4", prop, 30, cv::Size(image.size[1], image.size[0]));
            cout << "Open\n";
        }
        vector<cv::Point2f> imageBoardPoints;
        bool success = cv::findChessboardCorners(image, patternSize, imageBoardPoints,
                                                 cv::CALIB_CB_ADAPTIVE_THRESH | cv::CALIB_CB_NORMALIZE_IMAGE |
                                                 cv::CALIB_CB_FAST_CHECK);
        if (success) {
            workedInPast = true;
            homo = cv::findHomography(imageBoardPoints, objectPoints);
            cout << homo << endl;
        }
        cv::drawChessboardCorners(image, patternSize, imageBoardPoints, success);
        showImage("Original", image, 1);
        if (workedInPast) {
            cv::warpPerspective(image, warped, homo, cv::Size(image.size[1], image.size[0]));
            showImage("Corrected", warped, 1);
            writer.write(warped);
        }
    }
    return 0;
}

int main_featurematcher(int argc, char **argv) {
//    cv::VideoCapture video("chessboard.mp4");
    cv::VideoCapture video("boardframes.avi");
    auto featureDetector = cv::ORB::create();
//    auto featureDetector = cv::xfeatures2d::SIFT::create(500);
//    auto featureDetector = cv::xfeatures2d::SURF::create();
    auto matcher = *cv::BFMatcher::create(cv::NORM_L2SQR, true);
    bool firstIteration = true;
    Mat image;
    Mat lastImage;
    video.read(image);
    do {
        Mat grayscale;
        vector<cv::Point2f> corners;
        cv::cvtColor(image, grayscale, CV_BGR2GRAY);
//        bool found = cv::findChessboardCorners(grayscale, cv::Size(7, 7), corners,
//                                               CV_CALIB_CB_ADAPTIVE_THRESH | CV_CALIB_CB_FAST_CHECK |
//                                               CV_CALIB_CB_FAST_CHECK);
//        if (found) {
//            cv::imwrite("board_" + std::to_string(i++) + ".png", image);
//        }
//        cv::drawChessboardCorners(image, cv::Size(7, 7), corners, found);
        if (!firstIteration) {
            vector<cv::KeyPoint> keyPoints1, keyPoints2;
            Mat descriptors1, descriptors2, out;
//            vector<cv::DMatch> outputMatches;
            vector<vector<cv::DMatch>> outputMatches;
            featureDetector->detectAndCompute(image, Mat(), keyPoints1, descriptors1);
            featureDetector->detectAndCompute(lastImage, Mat(), keyPoints2, descriptors2);
            cout << keyPoints1.size() << endl;
            cout << keyPoints2.size() << endl;
//            matcher.match(descriptors1, descriptors2, outputMatches, cv::noArray());
            matcher.knnMatch(descriptors1, descriptors2, outputMatches, 1, cv::noArray(), true);
            cout << "Des1:" << descriptors1.size() << " dmarches:" << outputMatches.size() << endl;
            cv::drawMatches(image, keyPoints1, lastImage, keyPoints2, outputMatches, out);
            std::sort(outputMatches.begin(), outputMatches.end());
            vector<cv::Vec2f> points1, points2;
            for (const auto &matches : outputMatches) {
                const auto &match = matches[0];
//                assert(match.size() == 1);
                cout << match.distance << endl;
                if (match.distance > 20) {
                    break;
                }
                points1.push_back(keyPoints1[match.queryIdx].pt);
                points2.push_back(keyPoints2[match.trainIdx].pt);
            }
//            auto fundamental = cv::findFundamentalMat(points1, points2);
//            cout << fundamental << endl;
            showImage("Matched", out);
//            cv::drawKeypoints(image, keyPoints1, image);
        }
        showImage("Video", image, 1);
        firstIteration = false;
        image.copyTo(lastImage);
        video.read(image);
    } while (!image.empty());
    return 0;
}

int attempt_bad_calibrate(int argc, char **argv) {
    cv::VideoCapture video("chessboard.mp4");
    cv::Size patternSize(7, 7);
    vector<vector<cv::Point2f>> imagePoints;
    vector<vector<cv::Point3f>> objectPoints;
    Mat cameraMatrix = Mat::eye(3, 3, CV_64F);
    Mat image;
    Mat distCoeffs = Mat::zeros(8, 1, CV_64F);
    vector<Mat> rvecs, tvecs;
    vector<float> reprojErrors;
    bool calibrationComplete = false;
//    auto distCoeffs, rvecs, tvecs, stdDeviationIntrinsics, stdDeviationExtrinsics, perViewErrors;
    video.read(image);
    do {
        if (calibrationComplete) {
            Mat undistorted;
            cv::undistort(image, undistorted, cameraMatrix, distCoeffs);
            showImage("Undistorted", undistorted, 1);
        } else {
            cout << "Frames: " << imagePoints.size() << endl;
            if (imagePoints.size() > 10) {
                cout << "Running calibration" << endl;
                calibrationComplete = true;
                cv::calibrateCamera(objectPoints, imagePoints, cv::Size(image.size[0], image.size[1]), cameraMatrix,
                                    distCoeffs, rvecs, tvecs,
                                    CV_CALIB_FIX_K4 | CV_CALIB_FIX_K5);
            } else { // continue collecting frames for calibration
                Mat grayscale;
                cv::cvtColor(image, grayscale, CV_BGR2GRAY);
                vector<cv::Point> features;
                vector<cv::Point2f> corners;
                bool patternFound = cv::findChessboardCorners(grayscale, patternSize, corners,
                                                              CV_CALIB_CB_ADAPTIVE_THRESH | CV_CALIB_CB_FAST_CHECK |
                                                              CV_CALIB_CB_NORMALIZE_IMAGE);
                if (patternFound) {
                    cv::cornerSubPix(grayscale, corners, cv::Size(11, 11), cv::Size(-1, -1),
                                     cv::TermCriteria(CV_TERMCRIT_EPS + CV_TERMCRIT_ITER, 30, 0.1));
                    imagePoints.push_back(corners);
                    objectPoints.emplace_back(vector<cv::Point3f>());
                    for (int r = 0; r < patternSize.height; ++r) {
                        for (int c = 0; c < patternSize.width; ++c) {
                            objectPoints[imagePoints.size() - 1].emplace_back(r, c, 0);
                        }
                    }
                }
                cv::drawChessboardCorners(image, patternSize, Mat(corners), patternFound);
                cv::putText(image, "Chessboard Frames: " + std::to_string(imagePoints.size()), cv::Point(25, 25),
                            CV_FONT_NORMAL, 1.0,
                            cv::Scalar(0, 0, 255));
            }
        }
        showImage("Video", image, 16);
        video.read(image);
    } while (!image.empty());
    return 0;
}

int filter_nonboard_frames() {
    cv::VideoCapture vid("rotated.mp4");
    Mat img, corner;
    int i = 0;
    while (vid.read(img)) {
        if (cv::findChessboardCorners(img, cv::Size(7, 7), corner)) {
            cv::imwrite("output_" + std::to_string(i++) + ".png", img);
        }
    }
    return 0;
}
